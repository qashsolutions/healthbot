import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

// Types
interface User {
  id: string
  chat_id: string
  language: string
  language_name: string
  state: string
  onboarding_info: string
  plan_type: string
  usage_count: number
  daily_usage_count: number
  last_used: string
  created_at: string
  free_complex_used: boolean
  paid_complex_count: number  // Track total complex diagnoses (first 2 are free)
  pending_query?: string
}

interface TelegramUpdate {
  update_id: number
  message?: {
    message_id: number
    from: {
      id: number
      first_name: string
      last_name?: string
    }
    chat: {
      id: number
      type: string
    }
    date: number
    text?: string
    voice?: {
      file_id: string
      file_unique_id: string
      duration: number
      mime_type: string
      file_size: number
    }
    photo?: Array<{
      file_id: string
      file_unique_id: string
      width: number
      height: number
      file_size?: number
    }>
    document?: {
      file_id: string
      file_unique_id: string
      file_name?: string
      mime_type?: string
      file_size?: number
    }
  }
  callback_query?: {
    id: string
    from: {
      id: number
      first_name: string
    }
    message: {
      message_id: number
      chat: {
        id: number
        type: string
      }
    }
    data: string
  }
}

// Initialize Supabase client
const supabaseUrl = 'https://sqnbeyvilpbpngffkueg.supabase.co'
const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
const supabase = createClient(supabaseUrl, supabaseKey)

// Bot configuration
const BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY')!
const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY')!
const SARVAM_API_KEY = Deno.env.get('SARVAM_API_KEY')!
const CLAUDE_API_KEY = Deno.env.get('CLAUDE_API_KEY')!

// Language mapping for callback data
const LANGUAGE_CALLBACKS = {
  'lang_hi': { code: 'hi-IN', name: 'Hindi', sarvam: 'hi' },
  'lang_en': { code: 'en-IN', name: 'English', sarvam: 'en' },
  'lang_ta': { code: 'ta-IN', name: 'Tamil', sarvam: 'ta' },
  'lang_te': { code: 'te-IN', name: 'Telugu', sarvam: 'te' },
  'lang_kn': { code: 'kn-IN', name: 'Kannada', sarvam: 'kn' },
  'lang_ml': { code: 'ml-IN', name: 'Malayalam', sarvam: 'ml' },
  'lang_bn': { code: 'bn-IN', name: 'Bengali', sarvam: 'bn' },
  'lang_gu': { code: 'gu-IN', name: 'Gujarati', sarvam: 'gu' },
  'lang_mr': { code: 'mr-IN', name: 'Marathi', sarvam: 'mr' },
  'lang_pa': { code: 'pa-IN', name: 'Punjabi', sarvam: 'pa' }
}

// SVG Icons (colored)
const SVG_ICONS = {
  health: 'ЁЯПе', // Medical cross - red
  question: 'ЁЯТм', // Chat bubble - blue  
  medicine: 'ЁЯТК', // Pill - green
  scan: 'ЁЯУ╕', // Camera - purple
  language: 'ЁЯМР', // Globe - blue
  error: 'тЭМ', // X mark - red
  success: 'тЬЕ', // Check mark - green
  voice: 'ЁЯОд', // Microphone - orange
  processing: 'тЪЩя╕П', // Gear - gray
  warning: 'тЪая╕П', // Warning - yellow
  menu: 'ЁЯУЛ', // Clipboard - blue
  search: 'ЁЯФН', // Magnifying glass - blue
  location: 'ЁЯУН', // Location pin - red
  phone: 'ЁЯУЮ', // Phone - green
  money: 'ЁЯТ░', // Money bag - gold
  ai: 'ЁЯдЦ', // Robot - blue
  doctor: 'ЁЯСитАНтЪХя╕П', // Doctor - skin tone
  report: 'ЁЯУК', // Chart - blue
  help: 'тЭУ' // Question mark - blue
};

// Helper function to get SVG icon
function getIcon(name: keyof typeof SVG_ICONS): string {
  return SVG_ICONS[name] || 'тЧП';
}

// Comprehensive language translations with colored icons
const TRANSLATIONS = {
  // Error messages
  errorGeneral: {
    'hi': 'тЭМ **рд╕рдорд╕реНрдпрд╛ рд╣реБрдИ!** рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред',
    'en': 'тЭМ **ERROR!** Please try again.',
    'ta': 'тЭМ **рокро┐ро┤рпИ!** роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.',
    'te': 'тЭМ **р░▓р▒Лр░кр░В!** р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░│р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.',
    'kn': 'тЭМ **р▓жр│Лр▓╖!** р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ор▓др│Нр▓др│Ж р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐.',
    'ml': 'тЭМ **р┤кр┤┐р┤╢р┤Хр╡Н!** р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.',
    'bn': 'тЭМ **рждрзНрж░рзБржЯрж┐!** ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
    'gu': 'тЭМ **ркнрлВрк▓!** рклрк░рлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.',
    'mr': 'тЭМ **рддреНрд░реБрдЯреА!** рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.',
    'pa': 'тЭМ **риЧри▓ридрйА!** рижрйБримри╛ри░ри╛ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛ.'
  },
  
  // Voice processing messages
  voiceProcessing: {
    'hi': 'ЁЯОд **рдЖрдкрдХреА рдЖрд╡рд╛рдЬрд╝ рд╕рдВрджреЗрд╢ рдкреНрд░реЛрд╕реЗрд╕ рд╣реЛ рд░рд╣рд╛ рд╣реИ...**\n\nтЪая╕П **рдЕрдЧрд░ рдЖрдк рдЖрд╡рд╛рдЬрд╝ рд░рд┐рдХреЙрд░реНрдб рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ:**\nЁЯОд **рдорд╛рдЗрдХреНрд░реЛрдлреЛрди рдЕрдиреБрдорддрд┐ рд╕рдХреНрд╖рдо рдХрд░реЗрдВ**\nЁЯУЮ **рдлреЛрди рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдЬрд╛рдВрдЪреЗрдВ**',
    'en': 'ЁЯОд **PROCESSING YOUR VOICE MESSAGE...**\n\nтЪая╕П **If you cannot record voice:**\nЁЯОд **Enable microphone permission**\nЁЯУЮ **Check phone settings**',
    'ta': 'ЁЯОд **роЙроЩрпНроХро│рпН роХрпБро░ро▓рпН роЪрпЖропрпНродро┐ роЪрпЖропро▓ро╛роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ...**\n\nтЪая╕П **роХрпБро░ро▓рпН рокродро┐ро╡рпБ роЪрпЖропрпНроп роорпБроЯро┐ропро╛ро╡ро┐роЯрпНроЯро╛ро▓рпН:**\nЁЯОд **роорпИроХрпНро░рпЛроГрокрпЛройрпН роЕройрпБроородро┐ропрпИ роЗропроХрпНроХро╡рпБроорпН**\nЁЯУЮ **родрпКро▓рпИрокрпЗроЪро┐ роЕроорпИрокрпНрокрпБроХро│рпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН**',
    'te': 'ЁЯОд **р░ор▒А р░╡р░╛р░пр░┐р░╕р▒Н р░╕р░Вр░жр▒Зр░╢р░В р░кр▒Нр░░р░╛р░╕р▒Жр░╕р▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐...**\n\nтЪая╕П **р░ор▒Ар░░р▒Б р░╡р░╛р░пр░┐р░╕р▒Н р░░р░┐р░Хр░╛р░░р▒Нр░бр▒Н р░Ър▒Зр░пр░▓р▒Зр░Хр░кр▒Лр░др▒З:**\nЁЯОд **р░ор▒Ир░Хр▒Нр░░р▒Лр░лр▒Лр░ир▒Н р░Ер░ир▒Бр░ор░др░┐р░ир░┐ р░Ор░ир▒Зр░мр▒Бр░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐**\nЁЯУЮ **р░лр▒Лр░ир▒Н р░╕р▒Жр░Яр▒Нр░Яр░┐р░Вр░Чр▒НтАМр░▓р░ир▒Б р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐**',
    'kn': 'ЁЯОд **р▓ир▓┐р▓ор│Нр▓о р▓зр│Нр▓╡р▓ир▓┐ р▓╕р▓Вр▓жр│Зр▓╢ р▓кр│Нр▓░р▓Хр│Нр▓░р▓┐р▓пр│Жр▓Чр│Кр▓│р│Нр▓│р│Бр▓др│Нр▓др▓┐р▓жр│Ж...**\n\nтЪая╕П **р▓ир│Ар▓╡р│Б р▓зр│Нр▓╡р▓ир▓┐ р▓░р│Жр▓Хр▓╛р▓░р│Нр▓бр│Н р▓ор▓╛р▓бр▓▓р│Б р▓╕р▓╛р▓зр│Нр▓пр▓╡р▓╛р▓Чр▓жр▓┐р▓жр│Нр▓жр▓░р│Ж:**\nЁЯОд **р▓ор│Ир▓Хр│Нр▓░р│Лр▓лр│Лр▓ир│Н р▓Ер▓ир│Бр▓ор▓др▓┐р▓пр▓ир│Нр▓ир│Б р▓╕р▓Хр│Нр▓░р▓┐р▓пр▓Чр│Кр▓│р▓┐р▓╕р▓┐**\nЁЯУЮ **р▓лр│Лр▓ир│Н р▓╕р│Жр▓Яр│Нр▓Яр▓┐р▓Вр▓Чр│НтАМр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐**',
    'ml': 'ЁЯОд **р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╡р╡Лр┤пр╡Нр┤╕р╡Н р┤╕р┤ир╡Нр┤жр╡Зр┤╢р┤В р┤кр╡Нр┤░р╡Лр┤╕р┤╕р╡Нр┤╕р╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б...**\n\nтЪая╕П **р┤ир┤┐р┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н р┤╡р╡Лр┤пр╡Нр┤╕р╡Н р┤▒р╡Жр┤Хр╡Нр┤Хр╡Лр╡╝р┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр┤╛р╡╗ р┤Хр┤┤р┤┐р┤пр╡Бр┤ир╡Нр┤ир┤┐р┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜:**\nЁЯОд **р┤ор╡Ир┤Хр╡Нр┤░р╡Лр┤лр╡Лр╡║ р┤Ер┤ир╡Бр┤ор┤др┤┐ р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤ир┤Хр╡Нр┤╖р┤ор┤ор┤╛р┤Хр╡Нр┤Хр╡Бр┤Х**\nЁЯУЮ **р┤лр╡Лр╡║ р┤Хр╡Нр┤░р┤ор╡Ар┤Хр┤░р┤гр┤Щр╡Нр┤Щр╡╛ р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х**',
    'bn': 'ЁЯОд **ржЖржкржирж╛рж░ ржнржпрж╝рзЗрж╕ ржмрж╛рж░рзНрждрж╛ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рж╣ржЪрзНржЫрзЗ...**\n\nтЪая╕П **ржпржжрж┐ ржЖржкржирж┐ ржнржпрж╝рзЗрж╕ рж░рзЗржХрж░рзНржб ржХрж░рждрзЗ ржирж╛ ржкрж╛рж░рзЗржи:**\nЁЯОд **ржорж╛ржЗржХрзНрж░рзЛржлрзЛржи ржЕржирзБржорждрж┐ рж╕ржХрзНрж╖ржо ржХрж░рзБржи**\nЁЯУЮ **ржлрзЛржи рж╕рзЗржЯрж┐ржВрж╕ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи**',
    'gu': 'ЁЯОд **ркдркорк╛рк░рлЛ рк╡рлЙркЗрк╕ рк╕ркВркжрлЗрк╢ рккрлНрк░ркХрлНрк░рк┐ркпрк╛ ркХрк░рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ...**\n\nтЪая╕П **ркЬрлЛ ркдркорлЗ рк╡рлЙркЗрк╕ рк░рлЗркХрлЛрк░рлНркб ркХрк░рлА рк╢ркХркдрк╛ ркиркерлА:**\nЁЯОд **ркорк╛ркЗркХрлНрк░рлЛрклрлЛрки рккрк░рк╡рк╛ркиркЧрлА рк╕ркХрлНрк╖рко ркХрк░рлЛ**\nЁЯУЮ **рклрлЛрки рк╕рлЗркЯрк┐ркВркЧрлНрк╕ ркдрккрк╛рк╕рлЛ**',
    'mr': 'ЁЯОд **рддреБрдордЪрд╛ рдЖрд╡рд╛рдЬ рд╕рдВрджреЗрд╢ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХреЗрд▓рд╛ рдЬрд╛рдд рдЖрд╣реЗ...**\n\nтЪая╕П **рдЬрд░ рддреБрдореНрд╣реА рдЖрд╡рд╛рдЬ рд░реЗрдХреЙрд░реНрдб рдХрд░реВ рд╢рдХрдд рдирд╕рд╛рд▓:**\nЁЯОд **рдорд╛рдпрдХреНрд░реЛрдлреЛрди рдкрд░рд╡рд╛рдирдЧреА рд╕рдХреНрд╖рдо рдХрд░рд╛**\nЁЯУЮ **рдлреЛрди рд╕реЗрдЯрд┐рдВрдЧреНрдЬ рддрдкрд╛рд╕рд╛**',
    'pa': 'ЁЯОд **ридрйБри╣ри╛рибри╛ риЖри╡ри╛риЬри╝ ри╕рйБриирйЗри╣ри╛ рикрйНри░рйЛри╕рйИри╕ ри╣рйЛ ри░ри┐ри╣ри╛ ри╣рйИ...**\n\nтЪая╕П **риЬрйЗ ридрйБри╕рйАриВ риЖри╡ри╛риЬри╝ ри░ри┐риХри╛ри░риб риири╣рйАриВ риХри░ ри╕риХрижрйЗ:**\nЁЯОд **риори╛риИриХрйНри░рйЛрилрйЛрии риЗриЬри╛риЬри╝рид ри╕риори░рй▒рие риХри░рйЛ**\nЁЯУЮ **рилрйЛрии ри╕рйИриЯри┐рй░риЧри╛риВ рижрйА риЬри╛риВриЪ риХри░рйЛ**'
  },
  
  // Health question prompt
  healthQuestionPrompt: {
    'hi': 'ЁЯПе **рдЕрдкрдирд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ:**\n\nрдЕрдкрдиреЗ рд▓рдХреНрд╖рдг рдпрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдВрдмрдВрдзреА рдЪрд┐рдВрддрд╛ рдЯрд╛рдЗрдк рдХрд░реЗрдВ...',
    'en': 'ЁЯПе **ASK YOUR HEALTH QUESTION:**\n\nType your symptoms or health concern...',
    'ta': 'ЁЯПе **роЙроЩрпНроХро│рпН роЙроЯро▓рпНроиро▓ роХрпЗро│рпНро╡ро┐ропрпИроХрпН роХрпЗро│рпБроЩрпНроХро│рпН:**\n\nроЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпН роЕро▓рпНро▓родрпБ роЙроЯро▓рпНроиро▓ роХро╡ро▓рпИропрпИ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН...',
    'te': 'ЁЯПе **р░ор▒А р░Жр░░р▒Лр░Чр▒Нр░п р░кр▒Нр░░р░╢р▒Нр░ир░ир▒Б р░Ер░бр░Чр░Вр░бр░┐:**\n\nр░ор▒А р░▓р░Хр▒Нр░╖р░гр░╛р░▓р▒Б р░▓р▒Зр░жр░╛ р░Жр░░р▒Лр░Чр▒Нр░п р░╕р░ор░╕р▒Нр░пр░ир▒Б р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐...',
    'kn': 'ЁЯПе **р▓ир▓┐р▓ор│Нр▓о р▓Жр▓░р│Лр▓Чр│Нр▓п р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓пр▓ир│Нр▓ир│Б р▓Хр│Зр▓│р▓┐:**\n\nр▓ир▓┐р▓ор│Нр▓о р▓░р│Лр▓Чр▓▓р▓Хр│Нр▓╖р▓гр▓Чр▓│р│Б р▓Ер▓ер▓╡р▓╛ р▓Жр▓░р│Лр▓Чр│Нр▓п р▓Хр▓╛р▓│р▓Ьр▓┐р▓пр▓ир│Нр▓ир│Б р▓Яр│Ир▓кр│Н р▓ор▓╛р▓бр▓┐...',
    'ml': 'ЁЯПе **р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤Ър╡Лр┤жр╡Нр┤пр┤В р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х:**\n\nр┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤▓р┤Хр╡Нр┤╖р┤гр┤Щр╡Нр┤Щр╡╛ р┤Ер┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤кр╡Нр┤░р┤╢р╡Нр┤ир┤В р┤Яр╡Ир┤кр╡Нр┤кр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х...',
    'bn': 'ЁЯПе **ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрзНрж░рж╢рзНржи ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи:**\n\nржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржг ржмрж╛ рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕ржорж╕рзНржпрж╛ ржЯрж╛ржЗржк ржХрж░рзБржи...',
    'gu': 'ЁЯПе **ркдркорк╛рк░рлЛ ркЖрк░рлЛркЧрлНркп рккрлНрк░рк╢рлНрки рккрлВркЫрлЛ:**\n\nркдркорк╛рк░рк╛ рк▓ркХрлНрк╖ркгрлЛ ркЕркерк╡рк╛ ркЖрк░рлЛркЧрлНркп ркЪрк┐ркВркдрк╛ ркЯрк╛ркЗркк ркХрк░рлЛ...',
    'mr': 'ЁЯПе **рддреБрдордЪрд╛ рдЖрд░реЛрдЧреНрдп рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рд╛:**\n\nрддреБрдордЪреА рд▓рдХреНрд╖рдгреЗ рдХрд┐рдВрд╡рд╛ рдЖрд░реЛрдЧреНрдп рдЪрд┐рдВрддрд╛ рдЯрд╛рдЗрдк рдХрд░рд╛...',
    'pa': 'ЁЯПе **риЖрикригри╛ ри╕ри┐ри╣рид ри╕ри╡ри╛ри▓ рикрйБрй▒риЫрйЛ:**\n\nриЖрикригрйЗ ри▓рй▒риЫриг риЬри╛риВ ри╕ри┐ри╣рид риЪри┐рй░ридри╛ риЯри╛риИрик риХри░рйЛ...'
  },
  
  // Scan report prompt
  scanReportPrompt: {
    'hi': 'ЁЯУ╕ **рдореЗрдбрд┐рдХрд▓ рд░рд┐рдкреЛрд░реНрдЯ рд╕реНрдХреИрди рдХрд░реЗрдВ**\n\nЁЯУ╕ **рдЕрдкрдиреА рдлреЛрдЯреЛ рднреЗрдЬреЗрдВ:**\nтАв рд▓реИрдм рд░рд┐рдкреЛрд░реНрдЯ\nтАв рдкреНрд░рд┐рд╕реНрдХреНрд░рд┐рдкреНрд╢рди\nтАв рдореЗрдбрд┐рдХрд▓ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝\n\nЁЯдЦ **рд╣рдо рдЗрд╕реЗ рдореБрдлреНрдд рдореЗрдВ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВрдЧреЗ!**',
    'en': 'ЁЯУ╕ **SCAN MEDICAL REPORT**\n\nЁЯУ╕ **Send photo of your:**\nтАв Lab reports\nтАв Prescription\nтАв Medical documents\n\nЁЯдЦ **We\'ll analyze it for FREE!**',
    'ta': 'ЁЯУ╕ **рооро░рпБродрпНродрпБро╡ роЕро▒ро┐роХрпНроХрпИропрпИ ро╕рпНроХрпЗройрпН роЪрпЖропрпНропро╡рпБроорпН**\n\nЁЯУ╕ **роЙроЩрпНроХро│рпН рокрпБроХрпИрокрпНрокроЯродрпНродрпИ роЕройрпБрокрпНрокро╡рпБроорпН:**\nтАв роЖропрпНро╡роХ роЕро▒ро┐роХрпНроХрпИроХро│рпН\nтАв рооро░рпБроирпНродрпБроЪрпНроЪрпАроЯрпНроЯрпБ\nтАв рооро░рпБродрпНродрпБро╡ роЖро╡рогроЩрпНроХро│рпН\n\nЁЯдЦ **роиро╛роЩрпНроХро│рпН роЗродрпИ роЗро▓ро╡роЪрооро╛роХ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНро╡рпЛроорпН!**',
    'te': 'ЁЯУ╕ **р░╡р▒Ир░жр▒Нр░п р░ир░┐р░╡р▒Зр░жр░┐р░Хр░ир▒Б р░╕р▒Нр░Хр░╛р░ир▒Н р░Ър▒Зр░пр░Вр░бр░┐**\n\nЁЯУ╕ **р░ор▒А р░лр▒Лр░Яр▒Лр░ир▒Б р░кр░Вр░кр░Вр░бр░┐:**\nтАв р░▓р▒Нр░пр░╛р░мр▒Н р░░р░┐р░кр▒Лр░░р▒Нр░Яр▒НтАМр░▓р▒Б\nтАв р░кр▒Нр░░р░┐р░╕р▒Нр░Хр▒Нр░░р░┐р░кр▒Нр░╖р░ир▒Н\nтАв р░╡р▒Ир░жр▒Нр░п р░кр░др▒Нр░░р░╛р░▓р▒Б\n\nЁЯдЦ **р░ор▒Зр░ор▒Б р░жр▒Ар░ир▒Нр░ир░┐ р░Йр░Ър░┐р░др░Вр░Чр░╛ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░╕р▒Нр░др░╛р░ор▒Б!**',
    'kn': 'ЁЯУ╕ **р▓╡р│Ир▓жр│Нр▓пр▓Хр│Ар▓п р▓╡р▓░р▓жр▓┐р▓пр▓ир│Нр▓ир│Б р▓╕р│Нр▓Хр│Нр▓пр▓╛р▓ир│Н р▓ор▓╛р▓бр▓┐**\n\nЁЯУ╕ **р▓ир▓┐р▓ор│Нр▓о р▓лр│Лр▓Яр│Л р▓Хр▓│р│Бр▓╣р▓┐р▓╕р▓┐:**\nтАв р▓▓р│Нр▓пр▓╛р▓мр│Н р▓╡р▓░р▓жр▓┐р▓Чр▓│р│Б\nтАв р▓кр│Нр▓░р▓┐р▓╕р│Нр▓Хр│Нр▓░р▓┐р▓кр│Нр▓╖р▓ир│Н\nтАв р▓╡р│Ир▓жр│Нр▓пр▓Хр│Ар▓п р▓жр▓╛р▓Цр▓▓р│Жр▓Чр▓│р│Б\n\nЁЯдЦ **р▓ир▓╛р▓╡р│Б р▓Зр▓жр▓ир│Нр▓ир│Б р▓Йр▓Ър▓┐р▓др▓╡р▓╛р▓Чр▓┐ р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓┐р▓╕р│Бр▓др│Нр▓др│Зр▓╡р│Ж!**',
    'ml': 'ЁЯУ╕ **р┤ор╡Жр┤бр┤┐р┤Хр╡Нр┤Хр╡╜ р┤▒р┤┐р┤кр╡Нр┤кр╡Лр╡╝р┤Яр╡Нр┤Яр╡Н р┤╕р╡Нр┤Хр┤╛р╡╗ р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х**\n\nЁЯУ╕ **р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤лр╡Лр┤Яр╡Нр┤Яр╡Л р┤Ер┤пр┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤Х:**\nтАв р┤▓р┤╛р┤мр╡Н р┤▒р┤┐р┤кр╡Нр┤кр╡Лр╡╝р┤Яр╡Нр┤Яр╡Бр┤Хр╡╛\nтАв р┤Хр╡Бр┤▒р┤┐р┤кр╡Нр┤кр┤Яр┤┐\nтАв р┤ор╡Жр┤бр┤┐р┤Хр╡Нр┤Хр╡╜ р┤░р╡Зр┤Цр┤Хр╡╛\n\nЁЯдЦ **р┤Юр┤Щр╡Нр┤Щр╡╛ р┤Зр┤др╡Н р┤╕р╡Чр┤Ьр┤ир╡Нр┤пр┤ор┤╛р┤пр┤┐ р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤В!**',
    'bn': 'ЁЯУ╕ **ржорзЗржбрж┐ржХрзЗрж▓ рж░рж┐ржкрзЛрж░рзНржЯ рж╕рзНржХрзНржпрж╛ржи ржХрж░рзБржи**\n\nЁЯУ╕ **ржЖржкржирж╛рж░ ржЫржмрж┐ ржкрж╛ржарж╛ржи:**\nтАв рж▓рзНржпрж╛ржм рж░рж┐ржкрзЛрж░рзНржЯ\nтАв ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи\nтАв ржорзЗржбрж┐ржХрзЗрж▓ ржиржерж┐\n\nЁЯдЦ **ржЖржорж░рж╛ ржПржЯрж┐ ржмрж┐ржирж╛ржорзВрж▓рзНржпрзЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░ржм!**',
    'gu': 'ЁЯУ╕ **ркорлЗркбрк┐ркХрк▓ рк░рк┐рккрлЛрк░рлНркЯ рк╕рлНркХрлЗрки ркХрк░рлЛ**\n\nЁЯУ╕ **ркдркорк╛рк░рлЛ рклрлЛркЯрлЛ ркорлЛркХрк▓рлЛ:**\nтАв рк▓рлЗркм рк░рк┐рккрлЛрк░рлНркЯ\nтАв рккрлНрк░рк┐рк╕рлНркХрлНрк░рк┐рккрлНрк╢рки\nтАв ркорлЗркбрк┐ркХрк▓ ркжрк╕рлНркдрк╛рк╡рлЗркЬрлЛ\n\nЁЯдЦ **ркЕркорлЗ ркдрлЗркирлБркВ ркорклркд рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг ркХрк░рлАрк╢рлБркВ!**',
    'mr': 'ЁЯУ╕ **рд╡реИрджреНрдпрдХреАрдп рдЕрд╣рд╡рд╛рд▓ рд╕реНрдХреЕрди рдХрд░рд╛**\n\nЁЯУ╕ **рддреБрдордЪрд╛ рдлреЛрдЯреЛ рдкрд╛рдард╡рд╛:**\nтАв рд▓реЕрдм рдЕрд╣рд╡рд╛рд▓\nтАв рдкреНрд░рд┐рд╕реНрдХреНрд░рд┐рдкреНрд╢рди\nтАв рд╡реИрджреНрдпрдХреАрдп рдХрд╛рдЧрджрдкрддреНрд░реЗ\n\nЁЯдЦ **рдЖрдореНрд╣реА рдпрд╛рдЪреЗ рдореЛрдлрдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реВ!**',
    'pa': 'ЁЯУ╕ **риорйИрибрйАриХри▓ ри░ри┐рикрйЛри░риЯ ри╕риХрйИрии риХри░рйЛ**\n\nЁЯУ╕ **риЖрикригрйА рилрйЛриЯрйЛ ринрйЗриЬрйЛ:**\nтАв ри▓рйИрим ри░ри┐рикрйЛри░риЯри╛риВ\nтАв риирйБри╕риЦри╝ри╛\nтАв риорйИрибрйАриХри▓ рижри╕ридри╛ри╡рйЗриЬри╝\n\nЁЯдЦ **риЕри╕рйАриВ риЗри╕рижри╛ риорйБрилрид ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг риХри░ри╛риВриЧрйЗ!**'
  },
  
  // Processing image
  processingImage: {
    'hi': 'ЁЯУ╕ рдЖрдкрдХреА рдореЗрдбрд┐рдХрд▓ рдЗрдореЗрдЬ рдкреНрд░реЛрд╕реЗрд╕ рд╣реЛ рд░рд╣реА рд╣реИ...',
    'en': 'ЁЯУ╕ Processing your medical image...',
    'ta': 'ЁЯУ╕ роЙроЩрпНроХро│рпН рооро░рпБродрпНродрпБро╡ рокроЯроорпН роЪрпЖропро▓ро╛роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ...',
    'te': 'ЁЯУ╕ р░ор▒А р░╡р▒Ир░жр▒Нр░п р░Ър░┐р░др▒Нр░░р░В р░кр▒Нр░░р░╛р░╕р▒Жр░╕р▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐...',
    'kn': 'ЁЯУ╕ р▓ир▓┐р▓ор│Нр▓о р▓╡р│Ир▓жр│Нр▓пр▓Хр│Ар▓п р▓Ър▓┐р▓др│Нр▓░ р▓кр│Нр▓░р▓Хр│Нр▓░р▓┐р▓пр│Жр▓Чр│Кр▓│р│Нр▓│р│Бр▓др│Нр▓др▓┐р▓жр│Ж...',
    'ml': 'ЁЯУ╕ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤ор╡Жр┤бр┤┐р┤Хр╡Нр┤Хр╡╜ р┤Ър┤┐р┤др╡Нр┤░р┤В р┤кр╡Нр┤░р╡Лр┤╕р┤╕р╡Нр┤╕р╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б...',
    'bn': 'ЁЯУ╕ ржЖржкржирж╛рж░ ржорзЗржбрж┐ржХрзЗрж▓ ржЫржмрж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рж╣ржЪрзНржЫрзЗ...',
    'gu': 'ЁЯУ╕ ркдркорк╛рк░рлА ркорлЗркбрк┐ркХрк▓ ркЫркмрлА рккрлНрк░ркХрлНрк░рк┐ркпрк╛ ркХрк░рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ...',
    'mr': 'ЁЯУ╕ рддреБрдордЪреА рд╡реИрджреНрдпрдХреАрдп рдкреНрд░рддрд┐рдорд╛ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХреЗрд▓реА рдЬрд╛рдд рдЖрд╣реЗ...',
    'pa': 'ЁЯУ╕ ридрйБри╣ри╛рибрйА риорйИрибрйАриХри▓ ридри╕ри╡рйАри░ рикрйНри░рйЛри╕рйИри╕ ри╣рйЛ ри░ри╣рйА ри╣рйИ...'
  },
  
  // Invalid language choice
  invalidLanguageChoice: {
    'hi': 'тЭМ **рдЕрдорд╛рдиреНрдп рд╡рд┐рдХрд▓реНрдк!**\n\nЁЯСЖ **рдиреАрдЪреЗ рдмрдЯрди рджрдмрд╛рдПрдВ рдпрд╛ 1-10 рдЯрд╛рдЗрдк рдХрд░реЗрдВ:**',
    'en': 'тЭМ **INVALID CHOICE!**\n\nЁЯСЖ **TAP A BUTTON BELOW OR TYPE 1-10:**',
    'ta': 'тЭМ **родро╡ро▒ро╛рой родрпЗро░рпНро╡рпБ!**\n\nЁЯСЖ **роХрпАро┤рпЗ роЙро│рпНро│ рокрпКродрпНродро╛ройрпИ роЕро┤рпБродрпНродро╡рпБроорпН роЕро▓рпНро▓родрпБ 1-10 родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН:**',
    'te': 'тЭМ **р░Ър▒Жр░▓р▒Нр░▓р░ир░┐ р░Ор░Вр░кр░┐р░Х!**\n\nЁЯСЖ **р░Хр▒Нр░░р░┐р░Вр░ж р░мр░Яр░ир▒НтАМр░ир▒Б р░ир▒Кр░Хр▒Нр░Хр░Вр░бр░┐ р░▓р▒Зр░жр░╛ 1-10 р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐:**',
    'kn': 'тЭМ **р▓Ер▓ор▓╛р▓ир│Нр▓п р▓Жр▓пр│Нр▓Хр│Ж!**\n\nЁЯСЖ **р▓Хр│Жр▓│р▓Чр▓┐р▓и р▓мр▓Яр▓ир│Н р▓Тр▓др│Нр▓др▓┐р▓░р▓┐ р▓Ер▓ер▓╡р▓╛ 1-10 р▓Яр│Ир▓кр│Н р▓ор▓╛р▓бр▓┐:**',
    'ml': 'тЭМ **р┤Ер┤╕р┤╛р┤зр╡Бр┤╡р┤╛р┤п р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤кр╡Нр┤кр╡Н!**\n\nЁЯСЖ **р┤др┤╛р┤┤р╡Жр┤пр╡Бр┤│р╡Нр┤│ р┤мр┤Яр╡Нр┤Яр╡║ р┤Ер┤ор╡╝р┤др╡Нр┤др╡Бр┤Х р┤Ер┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ 1-10 р┤Яр╡Ир┤кр╡Нр┤кр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х:**',
    'bn': 'тЭМ **ржЕржмрзИржз ржкржЫржирзНржж!**\n\nЁЯСЖ **ржирзАржЪрзЗрж░ ржмрзЛрждрж╛ржо ржЯрж┐ржкрзБржи ржмрж╛ 1-10 ржЯрж╛ржЗржк ржХрж░рзБржи:**',
    'gu': 'тЭМ **ркЕркорк╛ркирлНркп рккрк╕ркВркжркЧрлА!**\n\nЁЯСЖ **ркирлАркЪрлЗ ркмркЯрки ркжркмрк╛рк╡рлЛ ркЕркерк╡рк╛ 1-10 ркЯрк╛ркЗркк ркХрк░рлЛ:**',
    'mr': 'тЭМ **рдЕрд╡реИрдз рдирд┐рд╡рдб!**\n\nЁЯСЖ **рдЦрд╛рд▓реА рдмрдЯрдг рджрд╛рдмрд╛ рдХрд┐рдВрд╡рд╛ 1-10 рдЯрд╛рдЗрдк рдХрд░рд╛:**',
    'pa': 'тЭМ **риЧри▓рид риЪрйЛриг!**\n\nЁЯСЖ **ри╣рйЗриари╛риВ римриЯрии рижримри╛риУ риЬри╛риВ 1-10 риЯри╛риИрик риХри░рйЛ:**'
  },
  
  // Jan Aushadhi search prompt
  janAushadhiPrompt: {
    'hi': 'ЁЯТК **рдЬрди рдФрд╖рдзрд┐ рд╕реНрдЯреЛрд░ рдЦреЛрдЬреЗрдВ**\n\nЁЯУН **рдЕрдкрдирд╛ 6 рдЕрдВрдХреЛрдВ рдХрд╛ рдкрд┐рдирдХреЛрдб рджрд░реНрдЬ рдХрд░реЗрдВ:**\n\nрдЙрджрд╛рд╣рд░рдг: 110001',
    'en': 'ЁЯТК **FIND JAN AUSHADHI STORES**\n\nЁЯУН **Enter your 6-digit pincode:**\n\nExample: 110001',
    'ta': 'ЁЯТК **роЬройрпН роФро╖родро┐ роХроЯрпИроХро│рпИроХрпН роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХро╡рпБроорпН**\n\nЁЯУН **роЙроЩрпНроХро│рпН 6 роЗро▓роХрпНроХ рокро┐ройрпНроХрпЛроЯрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН:**\n\nржЙржжрж╛рж╣рж░ржгроорпН: 110001',
    'te': 'ЁЯТК **р░Ьр░ир▒Н р░Фр░╖р░зр░┐ р░жр▒Бр░Хр░╛р░гр░╛р░▓р░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░Вр░бр░┐**\n\nЁЯУН **р░ор▒А 6 р░Ер░Вр░Хр▒Жр░▓ р░кр░┐р░ир▒НтАМр░Хр▒Лр░бр▒НтАМр░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐:**\n\nр░Йр░жр░╛рж╣рж░р░г: 110001',
    'kn': 'ЁЯТК **р▓Ьр▓и р▓Фр▓╖р▓зр▓┐ р▓Ер▓Вр▓Чр▓бр▓┐р▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Бр▓бр│Бр▓Хр▓┐**\n\nЁЯУН **р▓ир▓┐р▓ор│Нр▓о 6 р▓Ер▓Вр▓Хр▓┐р▓п р▓кр▓┐р▓ир│НтАМр▓Хр│Лр▓бр│Н р▓ир▓ор│Вр▓жр▓┐р▓╕р▓┐:**\n\nр▓Йр▓жр▓╛р▓╣р▓░р▓гр│Ж: 110001',
    'ml': 'ЁЯТК **р┤Ьр╡╗ р┤Фр┤╖р┤зр┤┐ р┤╕р╡Нр┤▒р╡Нр┤▒р╡Лр┤▒р╡Бр┤Хр╡╛ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡Бр┤Х**\n\nЁЯУН **р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж 6 р┤Ер┤Хр╡Нр┤Х р┤кр┤┐р╡╗р┤Хр╡Лр┤бр╡Н р┤ир╡╜р┤Хр╡Бр┤Х:**\n\nр┤Йр┤жр┤╛р┤╣р┤░р┤гр┤В: 110001',
    'bn': 'ЁЯТК **ржЬржи ржФрж╖ржзрж┐ ржжрзЛржХрж╛ржи ржЦрзБржБржЬрзБржи**\n\nЁЯУН **ржЖржкржирж╛рж░ 6 рж╕ржВржЦрзНржпрж╛рж░ ржкрж┐ржиржХрзЛржб рж▓рж┐ржЦрзБржи:**\n\nржЙржжрж╛рж╣рж░ржг: 110001',
    'gu': 'ЁЯТК **ркЬрки ркФрк╖ркзрк┐ рк╕рлНркЯрлЛрк░ рк╢рлЛркзрлЛ**\n\nЁЯУН **ркдркорк╛рк░рлЛ 6 ркЕркВркХркирлЛ рккрк┐ркиркХрлЛркб ркжрк╛ркЦрк▓ ркХрк░рлЛ:**\n\nркЙркжрк╛рк╣рк░ркг: 110001',
    'mr': 'ЁЯТК **рдЬрди рдФрд╖рдзреА рд╕реНрдЯреЛрдЕрд░ рд╢реЛрдзрд╛**\n\nЁЯУН **рддреБрдордЪрд╛ 6 рдЕрдВрдХреА рдкрд┐рдирдХреЛрдб рдПрдВрдЯрд░ рдХрд░рд╛:**\n\nрдЙрджрд╛рд╣рд░рдг: 110001',
    'pa': 'ЁЯТК **риЬрии риФри╕ри╝ризрйА ри╕риЯрйЛри░ ри▓рй▒ринрйЛ**\n\nЁЯУН **риЖрикригри╛ 6 риЕрй░риХри╛риВ рижри╛ рикри┐рй░риириХрйЛриб рижри╛риЦри▓ риХри░рйЛ:**\n\nриЙрижри╛ри╣ри░рии: 110001'
  },
  
  // Voice error messages
  voiceError: {
    'hi': 'тЭМ **рд╡реЙрдЗрд╕ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рдореЗрдВ рд╕рдорд╕реНрдпрд╛!**\n\nтЪЩя╕П **рдХреГрдкрдпрд╛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ:**\nЁЯОд **рдорд╛рдЗрдХреНрд░реЛрдлреЛрди рдЪрд╛рд▓реВ рд╣реИ**\nЁЯОд **рдЖрд╡рд╛рдЬрд╝ рд╕рд╛рдлрд╝ рд╣реИ**\nЁЯУЮ **рдиреЗрдЯрд╡рд░реНрдХ рдХрдиреЗрдХреНрд╢рди рдареАрдХ рд╣реИ**\n\nЁЯФД **рджреЛрдмрд╛рд░рд╛ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ**',
    'en': 'тЭМ **VOICE PROCESSING ERROR!**\n\nтЪЩя╕П **PLEASE CHECK:**\nЁЯОд **MICROPHONE IS ENABLED**\nЁЯОд **SPEAK CLEARLY**\nЁЯУЮ **NETWORK CONNECTION IS GOOD**\n\nЁЯФД **TRY AGAIN**',
    'ta': 'тЭМ **роХрпБро░ро▓рпН роЪрпЖропро▓ро╛роХрпНроХ рокро┐ро┤рпИ!**\n\nтЪЩя╕П **родропро╡рпБроЪрпЖропрпНродрпБ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН:**\nЁЯОд **роорпИроХрпНро░рпЛроГрокрпЛройрпН роЗропроХрпНроХрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ**\nЁЯОд **родрпЖро│ро┐ро╡ро╛роХ рокрпЗроЪро╡рпБроорпН**\nЁЯУЮ **роирпЖроЯрпНро╡рпКро░рпНроХрпН роЗрогрпИрокрпНрокрпБ роиройрпНро▒ро╛роХ роЙро│рпНро│родрпБ**\n\nЁЯФД **роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН**',
    'te': 'тЭМ **р░╡р░╛р░пр░┐р░╕р▒Н р░кр▒Нр░░р░╛р░╕р▒Жр░╕р░┐р░Вр░Чр▒Н р░▓р▒Лр░кр░В!**\n\nтЪЩя╕П **р░жр░пр░Ър▒Зр░╕р░┐ р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐:**\nЁЯОд **р░ор▒Ир░Хр▒Нр░░р▒Лр░лр▒Лр░ир▒Н р░Ор░ир▒Зр░мр▒Бр░▓р▒Н р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐**\nЁЯОд **р░╕р▒Нр░кр░╖р▒Нр░Яр░Вр░Чр░╛ р░ор░╛р░Яр▒Нр░▓р░╛р░бр░Вр░бр░┐**\nЁЯУЮ **р░ир▒Жр░Яр▒НтАМр░╡р░░р▒Нр░Хр▒Н р░Хр░ир▒Жр░Хр▒Нр░╖р░ир▒Н р░мр░╛р░Чр▒Бр░Вр░жр░┐**\n\nЁЯФД **р░ор░│р▒Нр░│р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐**',
    'kn': 'тЭМ **р▓зр│Нр▓╡р▓ир▓┐ р▓кр│Нр▓░р▓Хр│Нр▓░р▓┐р▓пр│Ж р▓жр│Лр▓╖!**\n\nтЪЩя╕П **р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐:**\nЁЯОд **р▓ор│Ир▓Хр│Нр▓░р│Лр▓лр│Лр▓ир│Н р▓╕р▓Хр│Нр▓░р▓┐р▓пр▓Чр│Кр▓│р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж**\nЁЯОд **р▓╕р│Нр▓кр▓╖р│Нр▓Яр▓╡р▓╛р▓Чр▓┐ р▓ор▓╛р▓др▓ир▓╛р▓бр▓┐**\nЁЯУЮ **р▓ир│Жр▓Яр│НтАМр▓╡р▓░р│Нр▓Хр│Н р▓╕р▓Вр▓кр▓░р│Нр▓Х р▓Йр▓др│Нр▓др▓ор▓╡р▓╛р▓Чр▓┐р▓жр│Ж**\n\nЁЯФД **р▓ор▓др│Нр▓др│Ж р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐**',
    'ml': 'тЭМ **р┤╡р╡Лр┤пр╡Нр┤╕р╡Н р┤кр╡Нр┤░р╡Лр┤╕р┤╕р╡Нр┤╕р┤┐р┤Вр┤Чр╡Н р┤кр┤┐р┤╢р┤Хр╡Н!**\n\nтЪЩя╕П **р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х:**\nЁЯОд **р┤ор╡Ир┤Хр╡Нр┤░р╡Лр┤лр╡Лр╡║ р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤ир┤Хр╡Нр┤╖р┤ор┤ор┤╛р┤гр╡Н**\nЁЯОд **р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤ор┤╛р┤пр┤┐ р┤╕р┤Вр┤╕р┤╛р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х**\nЁЯУЮ **р┤ир╡Жр┤▒р╡Нр┤▒р╡НтАМр┤╡р╡╝р┤Хр╡Нр┤Хр╡Н р┤Хр┤гр┤Хр╡Нр┤╖р╡╗ р┤ир┤▓р╡Нр┤▓р┤др┤╛р┤гр╡Н**\n\nЁЯФД **р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х**',
    'bn': 'тЭМ **ржнржпрж╝рзЗрж╕ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рждрзНрж░рзБржЯрж┐!**\n\nтЪЩя╕П **ржжржпрж╝рж╛ ржХрж░рзЗ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи:**\nЁЯОд **ржорж╛ржЗржХрзНрж░рзЛржлрзЛржи рж╕ржХрзНрж╖ржо ржХрж░рж╛ ржЖржЫрзЗ**\nЁЯОд **ржкрж░рж┐рж╖рзНржХрж╛рж░ржнрж╛ржмрзЗ ржХржерж╛ ржмрж▓рзБржи**\nЁЯУЮ **ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ рж╕ржВржпрзЛржЧ ржнрж╛рж▓ ржЖржЫрзЗ**\n\nЁЯФД **ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи**',
    'gu': 'тЭМ **рк╡рлЙркЗрк╕ рккрлНрк░рлЛрк╕рлЗрк╕рк┐ркВркЧ ркнрлВрк▓!**\n\nтЪЩя╕П **ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдрккрк╛рк╕рлЛ:**\nЁЯОд **ркорк╛ркЗркХрлНрк░рлЛрклрлЛрки рк╕ркХрлНрк╖рко ркЫрлЗ**\nЁЯОд **рк╕рлНрккрк╖рлНркЯ рк░рлАркдрлЗ ркмрлЛрк▓рлЛ**\nЁЯУЮ **ркирлЗркЯрк╡рк░рлНркХ ркХркирлЗркХрлНрк╢рки рк╕рк╛рк░рлБркВ ркЫрлЗ**\n\nЁЯФД **рклрк░рлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ**',
    'mr': 'тЭМ **рдЖрд╡рд╛рдЬ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рддреНрд░реБрдЯреА!**\n\nтЪЩя╕П **рдХреГрдкрдпрд╛ рддрдкрд╛рд╕рд╛:**\nЁЯОд **рдорд╛рдпрдХреНрд░реЛрдлреЛрди рд╕рдХреНрд╖рдо рдЖрд╣реЗ**\nЁЯОд **рд╕реНрдкрд╖реНрдЯрдкрдгреЗ рдмреЛрд▓рд╛**\nЁЯУЮ **рдиреЗрдЯрд╡рд░реНрдХ рдХрдиреЗрдХреНрд╢рди рдЪрд╛рдВрдЧрд▓реЗ рдЖрд╣реЗ**\n\nЁЯФД **рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛**',
    'pa': 'тЭМ **риЖри╡ри╛риЬри╝ рикрйНри░рйЛри╕рйИри╕ри┐рй░риЧ риЧри▓ридрйА!**\n\nтЪЩя╕П **риХри┐ри░рикри╛ риХри░риХрйЗ риЬри╛риВриЪ риХри░рйЛ:**\nЁЯОд **риори╛риИриХрйНри░рйЛрилрйЛрии ри╕риори░рй▒рие ри╣рйИ**\nЁЯОд **ри╕рикрй▒ри╕ри╝риЯ римрйЛри▓рйЛ**\nЁЯУЮ **риирйИрй▒риЯри╡ри░риХ риХриирйИриХри╕ри╝рии риЪрй░риЧри╛ ри╣рйИ**\n\nЁЯФД **рижрйБримри╛ри░ри╛ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛ**'
  },
  
  // Image processing error
  imageError: {
    'hi': 'рдЗрдореЗрдЬ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред',
    'en': 'Error processing image. Please try again.',
    'ta': 'рокроЯродрпНродрпИ роЪрпЖропро▓ро╛роХрпНроХрпБро╡родро┐ро▓рпН рокро┐ро┤рпИ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.',
    'te': 'р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░кр▒Нр░░р░╛р░╕р▒Жр░╕р▒Н р░Ър▒Зр░пр░бр░Вр░▓р▒Л р░▓р▒Лр░кр░В. р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░│р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.',
    'kn': 'р▓Ър▓┐р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓кр│Нр▓░р▓Хр│Нр▓░р▓┐р▓пр│Жр▓Чр│Кр▓│р▓┐р▓╕р│Бр▓╡р▓▓р│Нр▓▓р▓┐ р▓жр│Лр▓╖. р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ор▓др│Нр▓др│Ж р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐.',
    'ml': 'р┤Ър┤┐р┤др╡Нр┤░р┤В р┤кр╡Нр┤░р╡Лр┤╕р┤╕р╡Нр┤╕р╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир┤др┤┐р╡╜ р┤кр┤┐р┤╢р┤Хр╡Н. р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.',
    'bn': 'ржЫржмрж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржгрзЗ рждрзНрж░рзБржЯрж┐ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
    'gu': 'ркЫркмрлА рккрлНрк░ркХрлНрк░рк┐ркпрк╛ркорк╛ркВ ркнрлВрк▓. рклрк░рлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.',
    'mr': 'рдкреНрд░рддрд┐рдорд╛ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХрд░рддрд╛рдирд╛ рддреНрд░реБрдЯреА. рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.',
    'pa': 'ридри╕ри╡рйАри░ рикрйНри░рйЛри╕рйИри╕ риХри░рии ри╡ри┐рй▒риЪ риЧри▓ридрйАред рижрйБримри╛ри░ри╛ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛред'
  },
  
  // Invalid choice message
  invalidChoice: {
    'hi': `${getIcon('error')} **рдЧрд▓рдд рд╡рд┐рдХрд▓реНрдк!**\n\nЁЯСЖ **рдиреАрдЪреЗ рдмрдЯрди рджрдмрд╛рдПрдВ рдпрд╛ 1-10 рдЯрд╛рдЗрдк рдХрд░реЗрдВ:**`,
    'en': `${getIcon('error')} **INVALID CHOICE!**\n\nЁЯСЖ **TAP BUTTON BELOW OR TYPE 1-10:**`,
    'ta': `${getIcon('error')} **родро╡ро▒ро╛рой родрпЗро░рпНро╡рпБ!**\n\nЁЯСЖ **роХрпАро┤рпЗ роЙро│рпНро│ рокрпКродрпНродро╛ройрпИ роЕро┤рпБродрпНродро╡рпБроорпН роЕро▓рпНро▓родрпБ 1-10 родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН:**`,
    'te': `${getIcon('error')} **р░Ър▒Жр░▓р▒Нр░▓р░ир░┐ р░Ор░Вр░кр░┐р░Х!**\n\nЁЯСЖ **р░Хр▒Нр░░р░┐р░Вр░ж р░мр░Яр░ир▒НтАМр░ир▒Б р░ир▒Кр░Хр▒Нр░Хр░Вр░бр░┐ р░▓р▒Зр░жр░╛ 1-10 р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐:**`,
    'kn': `${getIcon('error')} **р▓Ер▓ор▓╛р▓ир│Нр▓п р▓Жр▓пр│Нр▓Хр│Ж!**\n\nЁЯСЖ **р▓Хр│Жр▓│р▓Чр▓┐р▓и р▓мр▓Яр▓ир│Н р▓Тр▓др│Нр▓др▓┐р▓░р▓┐ р▓Ер▓ер▓╡р▓╛ 1-10 р▓Яр│Ир▓кр│Н р▓ор▓╛р▓бр▓┐:**`,
    'ml': `${getIcon('error')} **р┤Ер┤╕р┤╛р┤зр╡Бр┤╡р┤╛р┤п р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤кр╡Нр┤кр╡Н!**\n\nЁЯСЖ **р┤др┤╛р┤┤р╡Жр┤пр╡Бр┤│р╡Нр┤│ р┤мр┤Яр╡Нр┤Яр╡║ р┤Ер┤ор╡╝р┤др╡Нр┤др╡Бр┤Х р┤Ер┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ 1-10 р┤Яр╡Ир┤кр╡Нр┤кр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х:**`,
    'bn': `${getIcon('error')} **ржЕржмрзИржз ржкржЫржирзНржж!**\n\nЁЯСЖ **ржирзАржЪрзЗрж░ ржмрзЛрждрж╛ржо ржЯрж┐ржкрзБржи ржмрж╛ 1-10 ржЯрж╛ржЗржк ржХрж░рзБржи:**`,
    'gu': `${getIcon('error')} **ркЕркорк╛ркирлНркп рккрк╕ркВркжркЧрлА!**\n\nЁЯСЖ **ркирлАркЪрлЗ ркмркЯрки ркжркмрк╛рк╡рлЛ ркЕркерк╡рк╛ 1-10 ркЯрк╛ркЗркк ркХрк░рлЛ:**`,
    'mr': `${getIcon('error')} **рдЕрд╡реИрдз рдирд┐рд╡рдб!**\n\nЁЯСЖ **рдЦрд╛рд▓реА рдмрдЯрдг рджрд╛рдмрд╛ рдХрд┐рдВрд╡рд╛ 1-10 рдЯрд╛рдЗрдк рдХрд░рд╛:**`,
    'pa': `${getIcon('error')} **риЧри▓рид риЪрйЛриг!**\n\nЁЯСЖ **ри╣рйЗриари╛риВ римриЯрии рижримри╛риУ риЬри╛риВ 1-10 риЯри╛риИрик риХри░рйЛ:**`
  },
  
  // Jan Aushadhi search prompt
  janAushadhiPrompt: {
    'hi': `${getIcon('medicine')} **рдЬрди рдФрд╖рдзрд┐ рд╕реНрдЯреЛрд░ рдЦреЛрдЬреЗрдВ**\n\n${getIcon('location')} **рдЕрдкрдирд╛ 6 рдЕрдВрдХреЛрдВ рдХрд╛ рдкрд┐рдирдХреЛрдб рджрд░реНрдЬ рдХрд░реЗрдВ:**\n\nрдЙрджрд╛рд╣рд░рдг: 110001`,
    'en': `${getIcon('medicine')} **FIND JAN AUSHADHI STORES**\n\n${getIcon('location')} **Enter your 6-digit pincode:**\n\nExample: 110001`,
    'ta': `${getIcon('medicine')} **роЬройрпН роФро╖родро┐ роХроЯрпИроХро│рпИроХрпН роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХро╡рпБроорпН**\n\n${getIcon('location')} **роЙроЩрпНроХро│рпН 6 роЗро▓роХрпНроХ рокро┐ройрпНроХрпЛроЯрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН:**\n\nроЙродро╛ро░рогроорпН: 110001`,
    'te': `${getIcon('medicine')} **р░Ьр░ир▒Н р░Фр░╖р░зр░┐ р░жр▒Бр░Хр░╛р░гр░╛р░▓р░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░Вр░бр░┐**\n\n${getIcon('location')} **р░ор▒А 6 р░Ер░Вр░Хр▒Жр░▓ р░кр░┐р░ир▒НтАМр░Хр▒Лр░бр▒НтАМр░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐:**\n\nр░Йр░жр░╛р░╣р░░р░г: 110001`,
    'kn': `${getIcon('medicine')} **р▓Ьр▓и р▓Фр▓╖р▓зр▓┐ р▓Ер▓Вр▓Чр▓бр▓┐р▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Бр▓бр│Бр▓Хр▓┐**\n\n${getIcon('location')} **р▓ир▓┐р▓ор│Нр▓о 6 р▓Ер▓Вр▓Хр▓┐р▓п р▓кр▓┐р▓ир│НтАМр▓Хр│Лр▓бр│Н р▓ир▓ор│Вр▓жр▓┐р▓╕р▓┐:**\n\nр▓Йр▓жр▓╛р▓╣р▓░р▓гр│Ж: 110001`,
    'ml': `${getIcon('medicine')} **р┤Ьр╡╗ р┤Фр┤╖р┤зр┤┐ р┤╕р╡Нр┤▒р╡Нр┤▒р╡Лр┤▒р╡Бр┤Хр╡╛ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡Бр┤Х**\n\n${getIcon('location')} **р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж 6 р┤Ер┤Хр╡Нр┤Х р┤кр┤┐р╡╗р┤Хр╡Лр┤бр╡Н р┤ир╡╜р┤Хр╡Бр┤Х:**\n\nр┤Йр┤жр┤╛р┤╣р┤░р┤гр┤В: 110001`,
    'bn': `${getIcon('medicine')} **ржЬржи ржФрж╖ржзрж┐ ржжрзЛржХрж╛ржи ржЦрзБржБржЬрзБржи**\n\n${getIcon('location')} **ржЖржкржирж╛рж░ 6 рж╕ржВржЦрзНржпрж╛рж░ ржкрж┐ржиржХрзЛржб рж▓рж┐ржЦрзБржи:**\n\nржЙржжрж╛рж╣рж░ржг: 110001`,
    'gu': `${getIcon('medicine')} **ркЬрки ркФрк╖ркзрк┐ рк╕рлНркЯрлЛрк░ рк╢рлЛркзрлЛ**\n\n${getIcon('location')} **ркдркорк╛рк░рлЛ 6 ркЕркВркХркирлЛ рккрк┐ркиркХрлЛркб ркжрк╛ркЦрк▓ ркХрк░рлЛ:**\n\nркЙркжрк╛рк╣рк░ркг: 110001`,
    'mr': `${getIcon('medicine')} **рдЬрди рдФрд╖рдзреА рд╕реНрдЯреЛрдЕрд░ рд╢реЛрдзрд╛**\n\n${getIcon('location')} **рддреБрдордЪрд╛ 6 рдЕрдВрдХреА рдкрд┐рдирдХреЛрдб рдПрдВрдЯрд░ рдХрд░рд╛:**\n\nрдЙрджрд╛рд╣рд░рдг: 110001`,
    'pa': `${getIcon('medicine')} **риЬрии риФри╕ри╝ризрйА ри╕риЯрйЛри░ ри▓рй▒ринрйЛ**\n\n${getIcon('location')} **риЖрикригри╛ 6 риЕрй░риХри╛риВ рижри╛ рикри┐рй░риириХрйЛриб рижри╛риЦри▓ риХри░рйЛ:**\n\nриЙрижри╛ри╣ри░рии: 110001`
  },
  
  // Voice error messages
  voiceError: {
    'hi': `${getIcon('error')} **рд╡реЙрдЗрд╕ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рдореЗрдВ рд╕рдорд╕реНрдпрд╛!**\n\n${getIcon('processing')} **рдХреГрдкрдпрд╛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ:**\n${getIcon('voice')} **рдорд╛рдЗрдХреНрд░реЛрдлреЛрди рдЪрд╛рд▓реВ рд╣реИ**\n${getIcon('voice')} **рдЖрд╡рд╛рдЬрд╝ рд╕рд╛рдлрд╝ рд╣реИ**\n${getIcon('phone')} **рдиреЗрдЯрд╡рд░реНрдХ рдХрдиреЗрдХреНрд╢рди рдареАрдХ рд╣реИ**\n\nЁЯФД **рджреЛрдмрд╛рд░рд╛ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ**`,
    'en': `${getIcon('error')} **VOICE PROCESSING ERROR!**\n\n${getIcon('processing')} **PLEASE CHECK:**\n${getIcon('voice')} **MICROPHONE IS ENABLED**\n${getIcon('voice')} **SPEAK CLEARLY**\n${getIcon('phone')} **NETWORK CONNECTION IS GOOD**\n\nЁЯФД **TRY AGAIN**`,
    'ta': `${getIcon('error')} **роХрпБро░ро▓рпН роЪрпЖропро▓ро╛роХрпНроХ рокро┐ро┤рпИ!**\n\n${getIcon('processing')} **родропро╡рпБроЪрпЖропрпНродрпБ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН:**\n${getIcon('voice')} **роорпИроХрпНро░рпЛроГрокрпЛройрпН роЗропроХрпНроХрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ**\n${getIcon('voice')} **родрпЖро│ро┐ро╡ро╛роХ рокрпЗроЪро╡рпБроорпН**\n${getIcon('phone')} **роирпЖроЯрпНро╡рпКро░рпНроХрпН роЗрогрпИрокрпНрокрпБ роиройрпНро▒ро╛роХ роЙро│рпНро│родрпБ**\n\nЁЯФД **роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН**`,
    'te': `${getIcon('error')} **р░╡р░╛р░пр░┐р░╕р▒Н р░кр▒Нр░░р░╛р░╕р▒Жр░╕р░┐р░Вр░Чр▒Н р░▓р▒Лр░кр░В!**\n\n${getIcon('processing')} **р░жр░пр░Ър▒Зр░╕р░┐ р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐:**\n${getIcon('voice')} **р░ор▒Ир░Хр▒Нр░░р▒Лр░лр▒Лр░ир▒Н р░Ор░ир▒Зр░мр▒Бр░▓р▒Н р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐**\n${getIcon('voice')} **р░╕р▒Нр░кр░╖р▒Нр░Яр░Вр░Чр░╛ р░ор░╛р░Яр▒Нр░▓р░╛р░бр░Вр░бр░┐**\n${getIcon('phone')} **р░ир▒Жр░Яр▒НтАМр░╡р░░р▒Нр░Хр▒Н р░Хр░ир▒Жр░Хр▒Нр░╖р░ир▒Н р░мр░╛р░Чр▒Бр░Вр░жр░┐**\n\nЁЯФД **р░ор░│р▒Нр░│р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐**`,
    'kn': `${getIcon('error')} **р▓зр│Нр▓╡р▓ир▓┐ р▓кр│Нр▓░р▓Хр│Нр▓░р▓┐р▓пр│Ж р▓жр│Лр▓╖!**\n\n${getIcon('processing')} **р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐:**\n${getIcon('voice')} **р▓ор│Ир▓Хр│Нр▓░р│Лр▓лр│Лр▓ир│Н р▓╕р▓Хр│Нр▓░р▓┐р▓пр▓Чр│Кр▓│р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж**\n${getIcon('voice')} **р▓╕р│Нр▓кр▓╖р│Нр▓Яр▓╡р▓╛р▓Чр▓┐ р▓ор▓╛р▓др▓ир▓╛р▓бр▓┐**\n${getIcon('phone')} **р▓ир│Жр▓Яр│НтАМр▓╡р▓░р│Нр▓Хр│Н р▓╕р▓Вр▓кр▓░р│Нр▓Х р▓Йр▓др│Нр▓др▓ор▓╡р▓╛р▓Чр▓┐р▓жр│Ж**\n\nЁЯФД **р▓ор▓др│Нр▓др│Ж р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐**`,
    'ml': `${getIcon('error')} **р┤╡р╡Лр┤пр╡Нр┤╕р╡Н р┤кр╡Нр┤░р╡Лр┤╕р┤╕р╡Нр┤╕р┤┐р┤Вр┤Чр╡Н р┤кр┤┐р┤╢р┤Хр╡Н!**\n\n${getIcon('processing')} **р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х:**\n${getIcon('voice')} **р┤ор╡Ир┤Хр╡Нр┤░р╡Лр┤лр╡Лр╡║ р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤ир┤Хр╡Нр┤╖р┤ор┤ор┤╛р┤гр╡Н**\n${getIcon('voice')} **р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤ор┤╛р┤пр┤┐ р┤╕р┤Вр┤╕р┤╛р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х**\n${getIcon('phone')} **р┤ир╡Жр┤▒р╡Нр┤▒р╡НтАМр┤╡р╡╝р┤Хр╡Нр┤Хр╡Н р┤Хр┤гр┤Хр╡Нр┤╖р╡╗ р┤ир┤▓р╡Нр┤▓р┤др┤╛р┤гр╡Н**\n\nЁЯФД **р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х**`,
    'bn': `${getIcon('error')} **ржнржпрж╝рзЗрж╕ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рждрзНрж░рзБржЯрж┐!**\n\n${getIcon('processing')} **ржжржпрж╝рж╛ ржХрж░рзЗ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи:**\n${getIcon('voice')} **ржорж╛ржЗржХрзНрж░рзЛржлрзЛржи рж╕ржХрзНрж╖ржо ржХрж░рж╛ ржЖржЫрзЗ**\n${getIcon('voice')} **ржкрж░рж┐рж╖рзНржХрж╛рж░ржнрж╛ржмрзЗ ржХржерж╛ ржмрж▓рзБржи**\n${getIcon('phone')} **ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ рж╕ржВржпрзЛржЧ ржнрж╛рж▓ ржЖржЫрзЗ**\n\nЁЯФД **ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи**`,
    'gu': `${getIcon('error')} **рк╡рлЙркЗрк╕ рккрлНрк░рлЛрк╕рлЗрк╕рк┐ркВркЧ ркнрлВрк▓!**\n\n${getIcon('processing')} **ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдрккрк╛рк╕рлЛ:**\n${getIcon('voice')} **ркорк╛ркЗркХрлНрк░рлЛрклрлЛрки рк╕ркХрлНрк╖рко ркЫрлЗ**\n${getIcon('voice')} **рк╕рлНрккрк╖рлНркЯ рк░рлАркдрлЗ ркмрлЛрк▓рлЛ**\n${getIcon('phone')} **ркирлЗркЯрк╡рк░рлНркХ ркХркирлЗркХрлНрк╢рки рк╕рк╛рк░рлБркВ ркЫрлЗ**\n\nЁЯФД **рклрк░рлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ**`,
    'mr': `${getIcon('error')} **рдЖрд╡рд╛рдЬ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рддреНрд░реБрдЯреА!**\n\n${getIcon('processing')} **рдХреГрдкрдпрд╛ рддрдкрд╛рд╕рд╛:**\n${getIcon('voice')} **рдорд╛рдпрдХреНрд░реЛрдлреЛрди рд╕рдХреНрд╖рдо рдЖрд╣реЗ**\n${getIcon('voice')} **рд╕реНрдкрд╖реНрдЯрдкрдгреЗ рдмреЛрд▓рд╛**\n${getIcon('phone')} **рдиреЗрдЯрд╡рд░реНрдХ рдХрдиреЗрдХреНрд╢рди рдЪрд╛рдВрдЧрд▓реЗ рдЖрд╣реЗ**\n\nЁЯФД **рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛**`,
    'pa': `${getIcon('error')} **риЖри╡ри╛риЬри╝ рикрйНри░рйЛри╕рйИри╕ри┐рй░риЧ риЧри▓ридрйА!**\n\n${getIcon('processing')} **риХри┐ри░рикри╛ риХри░риХрйЗ риЬри╛риВриЪ риХри░рйЛ:**\n${getIcon('voice')} **риори╛риИриХрйНри░рйЛрилрйЛрии ри╕риори░рй▒рие ри╣рйИ**\n${getIcon('voice')} **ри╕рикрй▒ри╕ри╝риЯ римрйЛри▓рйЛ**\n${getIcon('phone')} **риирйИрй▒риЯри╡ри░риХ риХриирйИриХри╕ри╝рии риЪрй░риЧри╛ ри╣рйИ**\n\nЁЯФД **рижрйБримри╛ри░ри╛ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛ**`
  },
  
  // Image processing error
  imageError: {
    'hi': 'рдЗрдореЗрдЬ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред',
    'en': 'Error processing image. Please try again.',
    'ta': 'рокроЯродрпНродрпИ роЪрпЖропро▓ро╛роХрпНроХрпБро╡родро┐ро▓рпН рокро┐ро┤рпИ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.',
    'te': 'р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░кр▒Нр░░р░╛р░╕р▒Жр░╕р▒Н р░Ър▒Зр░пр░бр░Вр░▓р▒Л р░▓р▒Лр░кр░В. р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░│р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.',
    'kn': 'р▓Ър▓┐р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓кр│Нр▓░р▓Хр│Нр▓░р▓┐р▓пр│Жр▓Чр│Кр▓│р▓┐р▓╕р│Бр▓╡р▓▓р│Нр▓▓р▓┐ р▓жр│Лр▓╖. р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ор▓др│Нр▓др│Ж р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐.',
    'ml': 'р┤Ър┤┐р┤др╡Нр┤░р┤В р┤кр╡Нр┤░р╡Лр┤╕р┤╕р╡Нр┤╕р╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир┤др┤┐р╡╜ р┤кр┤┐р┤╢р┤Хр╡Н. р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.',
    'bn': 'ржЫржмрж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржгрзЗ рждрзНрж░рзБржЯрж┐ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
    'gu': 'ркЫркмрлА рккрлНрк░ркХрлНрк░рк┐ркпрк╛ркорк╛ркВ ркнрлВрк▓. рклрк░рлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.',
    'mr': 'рдкреНрд░рддрд┐рдорд╛ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХрд░рддрд╛рдирд╛ рддреНрд░реБрдЯреА. рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.',
    'pa': 'ридри╕ри╡рйАри░ рикрйНри░рйЛри╕рйИри╕ риХри░рии ри╡ри┐рй▒риЪ риЧри▓ридрйАред рижрйБримри╛ри░ри╛ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛред'
  },
  
  // Scan report prompt (looks like this was partial)
  scanReportPrompt2: {
    'pa': 'ЁЯУ╕ **риорйИрибрйАриХри▓ ри░ри┐рикрйЛри░риЯ ри╕риХрйИрии риХри░рйЛ**\n\nЁЯУ╖ **риЖрикригрйА рилрйЛриЯрйЛ ринрйЗриЬрйЛ:**\nтАв ри▓рйИрим ри░ри┐рикрйЛри░риЯри╛риВ\nтАв риирйБри╕риЦри╝ри╛\nтАв риорйИрибрйАриХри▓ рижри╕ридри╛ри╡рйЗриЬри╝\n\nЁЯФм **риЕри╕рйАриВ риЗри╕рижри╛ риорйБрилрид ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг риХри░ри╛риВриЧрйЗ!**'
  },
  
  // Processing image
  processingImage: {
    'hi': 'ЁЯУ╕ рдЖрдкрдХреА рдореЗрдбрд┐рдХрд▓ рдЗрдореЗрдЬ рдкреНрд░реЛрд╕реЗрд╕ рд╣реЛ рд░рд╣реА рд╣реИ...',
    'en': 'ЁЯУ╕ Processing your medical image...',
    'ta': 'ЁЯУ╕ роЙроЩрпНроХро│рпН рооро░рпБродрпНродрпБро╡ рокроЯроорпН роЪрпЖропро▓ро╛роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ...',
    'te': 'ЁЯУ╕ р░ор▒А р░╡р▒Ир░жр▒Нр░п р░Ър░┐р░др▒Нр░░р░В р░кр▒Нр░░р░╛р░╕р▒Жр░╕р▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐...',
    'kn': 'ЁЯУ╕ р▓ир▓┐р▓ор│Нр▓о р▓╡р│Ир▓жр│Нр▓пр▓Хр│Ар▓п р▓Ър▓┐р▓др│Нр▓░ р▓кр│Нр▓░р▓Хр│Нр▓░р▓┐р▓пр│Жр▓Чр│Кр▓│р│Нр▓│р│Бр▓др│Нр▓др▓┐р▓жр│Ж...',
    'ml': 'ЁЯУ╕ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤ор╡Жр┤бр┤┐р┤Хр╡Нр┤Хр╡╜ р┤Ър┤┐р┤др╡Нр┤░р┤В р┤кр╡Нр┤░р╡Лр┤╕р┤╕р╡Нр┤╕р╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б...',
    'bn': 'ЁЯУ╕ ржЖржкржирж╛рж░ ржорзЗржбрж┐ржХрзЗрж▓ ржЫржмрж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рж╣ржЪрзНржЫрзЗ...',
    'gu': 'ЁЯУ╕ ркдркорк╛рк░рлА ркорлЗркбрк┐ркХрк▓ ркЫркмрлА рккрлНрк░ркХрлНрк░рк┐ркпрк╛ ркХрк░рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ...',
    'mr': 'ЁЯУ╕ рддреБрдордЪреА рд╡реИрджреНрдпрдХреАрдп рдкреНрд░рддрд┐рдорд╛ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХреЗрд▓реА рдЬрд╛рдд рдЖрд╣реЗ...',
    'pa': 'ЁЯУ╕ ридрйБри╣ри╛рибрйА риорйИрибрйАриХри▓ ридри╕ри╡рйАри░ рикрйНри░рйЛри╕рйИри╕ ри╣рйЛ ри░ри╣рйА ри╣рйИ...'
  },
  
  // Invalid language choice
  invalidLanguageChoice: {
    'hi': 'тЭМ **рдЕрдорд╛рдиреНрдп рд╡рд┐рдХрд▓реНрдк!**\n\nЁЯСЖ **рдиреАрдЪреЗ рдмрдЯрди рджрдмрд╛рдПрдВ рдпрд╛ 1-10 рдЯрд╛рдЗрдк рдХрд░реЗрдВ:**',
    'en': 'тЭМ **INVALID CHOICE!**\n\nЁЯСЖ **TAP A BUTTON BELOW OR TYPE 1-10:**',
    'ta': 'тЭМ **родро╡ро▒ро╛рой родрпЗро░рпНро╡рпБ!**\n\nЁЯСЖ **роХрпАро┤рпЗ роЙро│рпНро│ рокрпКродрпНродро╛ройрпИ роЕро┤рпБродрпНродро╡рпБроорпН роЕро▓рпНро▓родрпБ 1-10 родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН:**',
    'te': 'тЭМ **р░Ър▒Жр░▓р▒Нр░▓р░ир░┐ р░Ор░Вр░кр░┐р░Х!**\n\nЁЯСЖ **р░Хр▒Нр░░р░┐р░Вр░ж р░мр░Яр░ир▒НтАМр░ир▒Б р░ир▒Кр░Хр▒Нр░Хр░Вр░бр░┐ р░▓р▒Зр░жр░╛ 1-10 р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐:**',
    'kn': 'тЭМ **р▓Ер▓ор▓╛р▓ир│Нр▓п р▓Жр▓пр│Нр▓Хр│Ж!**\n\nЁЯСЖ **р▓Хр│Жр▓│р▓Чр▓┐р▓и р▓мр▓Яр▓ир│Н р▓Тр▓др│Нр▓др▓┐р▓░р▓┐ р▓Ер▓ер▓╡р▓╛ 1-10 р▓Яр│Ир▓кр│Н р▓ор▓╛р▓бр▓┐:**',
    'ml': 'тЭМ **р┤Ер┤╕р┤╛р┤зр╡Бр┤╡р┤╛р┤п р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤кр╡Нр┤кр╡Н!**\n\nЁЯСЖ **р┤др┤╛р┤┤р╡Жр┤пр╡Бр┤│р╡Нр┤│ р┤мр┤Яр╡Нр┤Яр╡║ р┤Ер┤ор╡╝р┤др╡Нр┤др╡Бр┤Х р┤Ер┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ 1-10 р┤Яр╡Ир┤кр╡Нр┤кр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х:**',
    'bn': 'тЭМ **ржЕржмрзИржз ржкржЫржирзНржж!**\n\nЁЯСЖ **ржирзАржЪрзЗрж░ ржмрзЛрждрж╛ржо ржЯрж┐ржкрзБржи ржмрж╛ 1-10 ржЯрж╛ржЗржк ржХрж░рзБржи:**',
    'gu': 'тЭМ **ркЕркорк╛ркирлНркп рккрк╕ркВркжркЧрлА!**\n\nЁЯСЖ **ркирлАркЪрлЗ ркмркЯрки ркжркмрк╛рк╡рлЛ ркЕркерк╡рк╛ 1-10 ркЯрк╛ркЗркк ркХрк░рлЛ:**',
    'mr': 'тЭМ **рдЕрд╡реИрдз рдирд┐рд╡рдб!**\n\nЁЯСЖ **рдЦрд╛рд▓реА рдмрдЯрдг рджрд╛рдмрд╛ рдХрд┐рдВрд╡рд╛ 1-10 рдЯрд╛рдЗрдк рдХрд░рд╛:**',
    'pa': 'тЭМ **риЧри▓рид риЪрйЛриг!**\n\nЁЯСЖ **ри╣рйЗриари╛риВ римриЯрии рижримри╛риУ риЬри╛риВ 1-10 риЯри╛риИрик риХри░рйЛ:**'
  },
  
  // Jan Aushadhi search prompt
  janAushadhiPrompt: {
    'hi': 'ЁЯТК **рдЬрди рдФрд╖рдзрд┐ рд╕реНрдЯреЛрд░ рдЦреЛрдЬреЗрдВ**\n\nЁЯУН **рдЕрдкрдирд╛ 6 рдЕрдВрдХреЛрдВ рдХрд╛ рдкрд┐рдирдХреЛрдб рджрд░реНрдЬ рдХрд░реЗрдВ:**\n\nрдЙрджрд╛рд╣рд░рдг: 110001',
    'en': 'ЁЯТК **FIND JAN AUSHADHI STORES**\n\nЁЯУН **Enter your 6-digit pincode:**\n\nExample: 110001',
    'ta': 'ЁЯТК **роЬройрпН роФро╖родро┐ роХроЯрпИроХро│рпИроХрпН роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХро╡рпБроорпН**\n\nЁЯУН **роЙроЩрпНроХро│рпН 6 роЗро▓роХрпНроХ рокро┐ройрпНроХрпЛроЯрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН:**\n\nроЙродро╛ро░рогроорпН: 110001',
    'te': 'ЁЯТК **р░Ьр░ир▒Н р░Фр░╖р░зр░┐ р░жр▒Бр░Хр░╛р░гр░╛р░▓р░ир▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░Вр░бр░┐**\n\nЁЯУН **р░ор▒А 6 р░Ер░Вр░Хр▒Жр░▓ р░кр░┐р░ир▒НтАМр░Хр▒Лр░бр▒НтАМр░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐:**\n\nр░Йр░жр░╛р░╣р░░р░г: 110001',
    'kn': 'ЁЯТК **р▓Ьр▓и р▓Фр▓╖р▓зр▓┐ р▓Ер▓Вр▓Чр▓бр▓┐р▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Бр▓бр│Бр▓Хр▓┐**\n\nЁЯУН **р▓ир▓┐р▓ор│Нр▓о 6 р▓Ер▓Вр▓Хр▓┐р▓п р▓кр▓┐р▓ир│НтАМр▓Хр│Лр▓бр│Н р▓ир▓ор│Вр▓жр▓┐р▓╕р▓┐:**\n\nр▓Йр▓жр▓╛р▓╣р▓░р▓гр│Ж: 110001',
    'ml': 'ЁЯТК **р┤Ьр╡╗ р┤Фр┤╖р┤зр┤┐ р┤╕р╡Нр┤▒р╡Нр┤▒р╡Лр┤▒р╡Бр┤Хр╡╛ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡Бр┤Х**\n\nЁЯУН **р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж 6 р┤Ер┤Хр╡Нр┤Х р┤кр┤┐р╡╗р┤Хр╡Лр┤бр╡Н р┤ир╡╜р┤Хр╡Бр┤Х:**\n\nр┤Йр┤жр┤╛р┤╣р┤░р┤гр┤В: 110001',
    'bn': 'ЁЯТК **ржЬржи ржФрж╖ржзрж┐ ржжрзЛржХрж╛ржи ржЦрзБржБржЬрзБржи**\n\nЁЯУН **ржЖржкржирж╛рж░ 6 рж╕ржВржЦрзНржпрж╛рж░ ржкрж┐ржиржХрзЛржб рж▓рж┐ржЦрзБржи:**\n\nржЙржжрж╛рж╣рж░ржг: 110001',
    'gu': 'ЁЯТК **ркЬрки ркФрк╖ркзрк┐ рк╕рлНркЯрлЛрк░ рк╢рлЛркзрлЛ**\n\nЁЯУН **ркдркорк╛рк░рлЛ 6 ркЕркВркХркирлЛ рккрк┐ркиркХрлЛркб ркжрк╛ркЦрк▓ ркХрк░рлЛ:**\n\nркЙркжрк╛рк╣рк░ркг: 110001',
    'mr': 'ЁЯТК **рдЬрди рдФрд╖рдзреА рд╕реНрдЯреЛрдЕрд░ рд╢реЛрдзрд╛**\n\nЁЯУН **рддреБрдордЪрд╛ 6 рдЕрдВрдХреА рдкрд┐рдирдХреЛрдб рдПрдВрдЯрд░ рдХрд░рд╛:**\n\nрдЙрджрд╛рд╣рд░рдг: 110001',
    'pa': 'ЁЯТК **риЬрии риФри╕ри╝ризрйА ри╕риЯрйЛри░ ри▓рй▒ринрйЛ**\n\nЁЯУН **риЖрикригри╛ 6 риЕрй░риХри╛риВ рижри╛ рикри┐рй░риириХрйЛриб рижри╛риЦри▓ риХри░рйЛ:**\n\nриЙрижри╛ри╣ри░рии: 110001'
  },
  
  // Voice error messages
  voiceError: {
    'hi': 'тЭМ **рд╡реЙрдЗрд╕ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рдореЗрдВ рд╕рдорд╕реНрдпрд╛!**\n\nЁЯФз **рдХреГрдкрдпрд╛ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ:**\nЁЯОд **рдорд╛рдЗрдХреНрд░реЛрдлреЛрди рдЪрд╛рд▓реВ рд╣реИ**\nЁЯФК **рдЖрд╡рд╛рдЬрд╝ рд╕рд╛рдлрд╝ рд╣реИ**\nЁЯУ▒ **рдиреЗрдЯрд╡рд░реНрдХ рдХрдиреЗрдХреНрд╢рди рдареАрдХ рд╣реИ**\n\nЁЯФД **рджреЛрдмрд╛рд░рд╛ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ**',
    'en': 'тЭМ **VOICE PROCESSING ERROR!**\n\nЁЯФз **PLEASE CHECK:**\nЁЯОд **MICROPHONE IS ENABLED**\nЁЯФК **SPEAK CLEARLY**\nЁЯУ▒ **NETWORK CONNECTION IS GOOD**\n\nЁЯФД **TRY AGAIN**',
    'ta': 'тЭМ **роХрпБро░ро▓рпН роЪрпЖропро▓ро╛роХрпНроХ рокро┐ро┤рпИ!**\n\nЁЯФз **родропро╡рпБроЪрпЖропрпНродрпБ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН:**\nЁЯОд **роорпИроХрпНро░рпЛроГрокрпЛройрпН роЗропроХрпНроХрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ**\nЁЯФК **родрпЖро│ро┐ро╡ро╛роХ рокрпЗроЪро╡рпБроорпН**\nЁЯУ▒ **роирпЖроЯрпНро╡рпКро░рпНроХрпН роЗрогрпИрокрпНрокрпБ роиройрпНро▒ро╛роХ роЙро│рпНро│родрпБ**\n\nЁЯФД **роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН**',
    'te': 'тЭМ **р░╡р░╛р░пр░┐р░╕р▒Н р░кр▒Нр░░р░╛р░╕р▒Жр░╕р░┐р░Вр░Чр▒Н р░▓р▒Лр░кр░В!**\n\nЁЯФз **р░жр░пр░Ър▒Зр░╕р░┐ р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐:**\nЁЯОд **р░ор▒Ир░Хр▒Нр░░р▒Лр░лр▒Лр░ир▒Н р░Ор░ир▒Зр░мр▒Бр░▓р▒Н р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐**\nЁЯФК **р░╕р▒Нр░кр░╖р▒Нр░Яр░Вр░Чр░╛ р░ор░╛р░Яр▒Нр░▓р░╛р░бр░Вр░бр░┐**\nЁЯУ▒ **р░ир▒Жр░Яр▒НтАМр░╡р░░р▒Нр░Хр▒Н р░Хр░ир▒Жр░Хр▒Нр░╖р░ир▒Н р░мр░╛р░Чр▒Бр░Вр░жр░┐**\n\nЁЯФД **р░ор░│р▒Нр░│р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐**',
    'kn': 'тЭМ **р▓зр│Нр▓╡р▓ир▓┐ р▓кр│Нр▓░р▓Хр│Нр▓░р▓┐р▓пр│Ж р▓жр│Лр▓╖!**\n\nЁЯФз **р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐:**\nЁЯОд **р▓ор│Ир▓Хр│Нр▓░р│Лр▓лр│Лр▓ир│Н р▓╕р▓Хр│Нр▓░р▓┐р▓пр▓Чр│Кр▓│р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж**\nЁЯФК **р▓╕р│Нр▓кр▓╖р│Нр▓Яр▓╡р▓╛р▓Чр▓┐ р▓ор▓╛р▓др▓ир▓╛р▓бр▓┐**\nЁЯУ▒ **р▓ир│Жр▓Яр│НтАМр▓╡р▓░р│Нр▓Хр│Н р▓╕р▓Вр▓кр▓░р│Нр▓Х р▓Йр▓др│Нр▓др▓ор▓╡р▓╛р▓Чр▓┐р▓жр│Ж**\n\nЁЯФД **р▓ор▓др│Нр▓др│Ж р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐**',
    'ml': 'тЭМ **р┤╡р╡Лр┤пр╡Нр┤╕р╡Н р┤кр╡Нр┤░р╡Лр┤╕р┤╕р╡Нр┤╕р┤┐р┤Вр┤Чр╡Н р┤кр┤┐р┤╢р┤Хр╡Н!**\n\nЁЯФз **р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х:**\nЁЯОд **р┤ор╡Ир┤Хр╡Нр┤░р╡Лр┤лр╡Лр╡║ р┤кр╡Нр┤░р┤╡р╡╝р┤др╡Нр┤др┤ир┤Хр╡Нр┤╖р┤ор┤ор┤╛р┤гр╡Н**\nЁЯФК **р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤ор┤╛р┤пр┤┐ р┤╕р┤Вр┤╕р┤╛р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х**\nЁЯУ▒ **р┤ир╡Жр┤▒р╡Нр┤▒р╡НтАМр┤╡р╡╝р┤Хр╡Нр┤Хр╡Н р┤Хр┤гр┤Хр╡Нр┤╖р╡╗ р┤ир┤▓р╡Нр┤▓р┤др┤╛р┤гр╡Н**\n\nЁЯФД **р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х**',
    'bn': 'тЭМ **ржнржпрж╝рзЗрж╕ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг рждрзНрж░рзБржЯрж┐!**\n\nЁЯФз **ржжржпрж╝рж╛ ржХрж░рзЗ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи:**\nЁЯОд **ржорж╛ржЗржХрзНрж░рзЛржлрзЛржи рж╕ржХрзНрж╖ржо ржХрж░рж╛ ржЖржЫрзЗ**\nЁЯФК **ржкрж░рж┐рж╖рзНржХрж╛рж░ржнрж╛ржмрзЗ ржХржерж╛ ржмрж▓рзБржи**\nЁЯУ▒ **ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ рж╕ржВржпрзЛржЧ ржнрж╛рж▓ ржЖржЫрзЗ**\n\nЁЯФД **ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи**',
    'gu': 'тЭМ **рк╡рлЙркЗрк╕ рккрлНрк░рлЛрк╕рлЗрк╕рк┐ркВркЧ ркнрлВрк▓!**\n\nЁЯФз **ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркдрккрк╛рк╕рлЛ:**\nЁЯОд **ркорк╛ркЗркХрлНрк░рлЛрклрлЛрки рк╕ркХрлНрк╖рко ркЫрлЗ**\nЁЯФК **рк╕рлНрккрк╖рлНркЯ рк░рлАркдрлЗ ркмрлЛрк▓рлЛ**\nЁЯУ▒ **ркирлЗркЯрк╡рк░рлНркХ ркХркирлЗркХрлНрк╢рки рк╕рк╛рк░рлБркВ ркЫрлЗ**\n\nЁЯФД **рклрк░рлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ**',
    'mr': 'тЭМ **рдЖрд╡рд╛рдЬ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рддреНрд░реБрдЯреА!**\n\nЁЯФз **рдХреГрдкрдпрд╛ рддрдкрд╛рд╕рд╛:**\nЁЯОд **рдорд╛рдпрдХреНрд░реЛрдлреЛрди рд╕рдХреНрд╖рдо рдЖрд╣реЗ**\nЁЯФК **рд╕реНрдкрд╖реНрдЯрдкрдгреЗ рдмреЛрд▓рд╛**\nЁЯУ▒ **рдиреЗрдЯрд╡рд░реНрдХ рдХрдиреЗрдХреНрд╢рди рдЪрд╛рдВрдЧрд▓реЗ рдЖрд╣реЗ**\n\nЁЯФД **рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛**',
    'pa': 'тЭМ **риЖри╡ри╛риЬри╝ рикрйНри░рйЛри╕рйИри╕ри┐рй░риЧ риЧри▓ридрйА!**\n\nЁЯФз **риХри┐ри░рикри╛ риХри░риХрйЗ риЬри╛риВриЪ риХри░рйЛ:**\nЁЯОд **риори╛риИриХрйНри░рйЛрилрйЛрии ри╕риори░рй▒рие ри╣рйИ**\nЁЯФК **ри╕рикрй▒ри╕ри╝риЯ римрйЛри▓рйЛ**\nЁЯУ▒ **риирйИрй▒риЯри╡ри░риХ риХриирйИриХри╕ри╝рии риЪрй░риЧри╛ ри╣рйИ**\n\nЁЯФД **рижрйБримри╛ри░ри╛ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛ**'
  },
  
  // Image processing error
  imageError: {
    'hi': 'рдЗрдореЗрдЬ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред',
    'en': 'Error processing image. Please try again.',
    'ta': 'рокроЯродрпНродрпИ роЪрпЖропро▓ро╛роХрпНроХрпБро╡родро┐ро▓рпН рокро┐ро┤рпИ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.',
    'te': 'р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░кр▒Нр░░р░╛р░╕р▒Жр░╕р▒Н р░Ър▒Зр░пр░бр░Вр░▓р▒Л р░▓р▒Лр░кр░В. р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░│р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.',
    'kn': 'р▓Ър▓┐р▓др│Нр▓░р▓╡р▓ир│Нр▓ир│Б р▓кр│Нр▓░р▓Хр│Нр▓░р▓┐р▓пр│Жр▓Чр│Кр▓│р▓┐р▓╕р│Бр▓╡р▓▓р│Нр▓▓р▓┐ р▓жр│Лр▓╖. р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ор▓др│Нр▓др│Ж р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐.',
    'ml': 'р┤Ър┤┐р┤др╡Нр┤░р┤В р┤кр╡Нр┤░р╡Лр┤╕р┤╕р╡Нр┤╕р╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир┤др┤┐р╡╜ р┤кр┤┐р┤╢р┤Хр╡Н. р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.',
    'bn': 'ржЫржмрж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржгрзЗ рждрзНрж░рзБржЯрж┐ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
    'gu': 'ркЫркмрлА рккрлНрк░ркХрлНрк░рк┐ркпрк╛ркорк╛ркВ ркнрлВрк▓. рклрк░рлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ.',
    'mr': 'рдкреНрд░рддрд┐рдорд╛ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХрд░рддрд╛рдирд╛ рддреНрд░реБрдЯреА. рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.',
    'pa': 'ридри╕ри╡рйАри░ рикрйНри░рйЛри╕рйИри╕ риХри░рии ри╡ри┐рй▒риЪ риЧри▓ридрйАред рижрйБримри╛ри░ри╛ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛред'
  }
};

// Helper function to get translated text
function getTranslation(key: string, language: string): string {
  const translations = TRANSLATIONS[key as keyof typeof TRANSLATIONS];
  if (!translations) return 'Translation not found';
  return translations[language as keyof typeof translations] || translations['en'];
}

// User management functions
async function getOrCreateUser(chatId: string): Promise<User> {
  try {
    let { data: user, error } = await supabase
      .from('users')
      .select('*')
      .eq('chat_id', chatId)
      .single()

    if (error && error.code === 'PGRST116') {
      const { data: newUser, error: createError } = await supabase
        .from('users')
        .insert([{
          chat_id: chatId,
          created_at: new Date().toISOString(),
          state: 'language_selection',
          usage_count: 0,
          plan_type: 'free',
          free_complex_used: false,
          paid_complex_count: 0
        }])
        .select()
        .single()

      if (createError) throw createError
      return newUser as User
    }

    if (error) throw error
    return user as User
  } catch (err) {
    console.error('Error in getOrCreateUser:', err)
    throw err
  }
}

async function updateUserState(chatId: string, updates: any) {
  const { data, error } = await supabase
    .from('users')
    .update(updates)
    .eq('chat_id', chatId)
  
  if (error) throw error
  return data
}

// Sarvam API functions
async function transcribeAudio(audioUrl: string, userLanguage: string): Promise<string> {
  try {
    console.log(`ЁЯОд Transcribing audio with Sarvam STT`);
    
    // Download audio file
    const audioResponse = await fetch(audioUrl);
    const audioArrayBuffer = await audioResponse.arrayBuffer();
    
    // Create blob with proper OGG audio type
    const audioBlob = new Blob([audioArrayBuffer], { type: 'audio/ogg' });
    
    // Convert to FormData for Sarvam API
    const formData = new FormData();
    formData.append('file', audioBlob, 'audio.ogg');
    formData.append('model', 'saarika:v2.5');
    
    const response = await fetch('https://api.sarvam.ai/speech-to-text', {
      method: 'POST',
      headers: {
        'api-subscription-key': SARVAM_API_KEY
      },
      body: formData
    });
    
    const result = await response.json();
    console.log('Sarvam STT response:', JSON.stringify(result));
    
    // Based on Sarvam docs, response structure is { "transcript": "text" }
    if (result.transcript) {
      console.log(`тЬЕ STT Success: "${result.transcript}"`);
      return result.transcript;
    } else {
      console.error('No transcript in response:', result);
      throw new Error('No transcript returned from Sarvam API');
    }
  } catch (error) {
    console.error('Sarvam STT error:', error);
    throw error;
  }
}

async function translateText(text: string, fromLang: string, toLang: string): Promise<string> {
  try {
    console.log(`ЁЯМР Translating: ${fromLang} тЖТ ${toLang}`);
    
    const response = await fetch('https://api.sarvam.ai/translate', {
      method: 'POST',
      headers: {
        'API-Subscription-Key': SARVAM_API_KEY,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        input: text,
        source_language_code: fromLang,
        target_language_code: toLang,
        speaker_gender: 'Female',
        mode: 'formal',
        model: 'mayura:v1',
        enable_preprocessing: true
      })
    });
    
    const result = await response.json();
    
    if (result.translated_text) {
      console.log(`тЬЕ Translation: "${result.translated_text}"`);
      return result.translated_text;
    } else {
      console.error('No translation in response:', result);
      return text; // Fallback to original text
    }
  } catch (error) {
    console.error('Sarvam translation error:', error);
    return text; // Fallback to original text
  }
}

async function generateAudio(text: string, language: string): Promise<ArrayBuffer> {
  try {
    console.log(`ЁЯФК Generating audio with Sarvam TTS`);
    
    // Limit text to 500 characters per Sarvam docs
    const limitedText = text.length > 500 ? text.substring(0, 500) + '...' : text;
    
    const response = await fetch('https://api.sarvam.ai/text-to-speech', {
      method: 'POST',
      headers: {
        'api-subscription-key': SARVAM_API_KEY,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        text: limitedText,
        target_language_code: language,
        speaker: 'meera',
        pitch: 0,
        pace: 1.65,
        loudness: 1.5,
        speech_sample_rate: 8000,
        enable_preprocessing: true,
        model: 'bulbul:v1'
      })
    });
    
    if (response.ok) {
      const audioBuffer = await response.arrayBuffer();
      console.log(`тЬЕ TTS Success: Generated ${audioBuffer.byteLength} bytes`);
      return audioBuffer;
    } else {
      const errorText = await response.text();
      console.error('TTS API error:', response.status, errorText);
      throw new Error(`TTS API error: ${response.status}`);
    }
  } catch (error) {
    console.error('Sarvam TTS error:', error);
    throw error;
  }
}

// MAI-DxO Orchestrator - Multi-Agent Diagnostic System (Updated)
const MEDICAL_AGENTS = {
  DIFFERENTIAL_DIAGNOSTICIAN: "Generate top 3 diagnoses with probabilities. Be concise.",
  TEST_STRATEGIST: "Recommend 2-3 most cost-effective tests for Indian patients.",
  DEVIL_ADVOCATE: "Challenge the diagnosis. What could be missed?",
  SYNTHESIZER: "Provide final assessment with confidence level."
};

async function maiDxoOrchestrator(query: string, userContext: any): Promise<string> {
  try {
    console.log(`ЁЯдЦ Starting MAI-DxO for: "${query}"`);
    console.log(`ЁЯФС API Keys check: Claude=${!!CLAUDE_API_KEY}, OpenAI=${!!OPENAI_API_KEY}, Gemini=${!!GEMINI_API_KEY}`);
    
    // Run parallel consultations with all 3 AI models
    const [claudeResult, openaiResult, geminiResult] = await Promise.allSettled([
      consultClaude(query, userContext),
      consultOpenAI(query, userContext), 
      consultGemini(query, userContext)
    ]);

    // Collect successful responses
    const responses = [];
    if (claudeResult.status === 'fulfilled' && !claudeResult.value.includes('error') && !claudeResult.value.includes('unavailable')) {
      responses.push(`**Claude:** ${claudeResult.value}`);
      console.log('тЬЕ Claude consultation successful');
    } else {
      console.log('тЭМ Claude consultation failed:', claudeResult.status === 'fulfilled' ? claudeResult.value : claudeResult.reason);
    }
    
    if (openaiResult.status === 'fulfilled' && !openaiResult.value.includes('error') && !openaiResult.value.includes('unavailable')) {
      responses.push(`**OpenAI:** ${openaiResult.value}`);
      console.log('тЬЕ OpenAI consultation successful');
    } else {
      console.log('тЭМ OpenAI consultation failed:', openaiResult.status === 'fulfilled' ? openaiResult.value : openaiResult.reason);
    }
    
    if (geminiResult.status === 'fulfilled' && !geminiResult.value.includes('error') && !geminiResult.value.includes('unavailable')) {
      responses.push(`**Gemini:** ${geminiResult.value}`);
      console.log('тЬЕ Gemini consultation successful');
    } else {
      console.log('тЭМ Gemini consultation failed:', geminiResult.status === 'fulfilled' ? geminiResult.value : geminiResult.reason);
    }

    // If no AI responses, fall back to Claude health response
    if (responses.length === 0) {
      console.log('ЁЯФД All AIs failed, falling back to simple health response');
      return await getHealthResponse(query, userContext, 100);
    }

    // Synthesize brief final diagnosis
    const synthesis = await synthesizeBriefDiagnosis(responses, query);
    
    return `ЁЯдЦ **MULTI-AI ANALYSIS** (${responses.length}/3 AIs)\n\n${synthesis}\n\nтЪая╕П AI guidance only. Consult doctor for proper diagnosis.`;
    
  } catch (error) {
    console.error('MAI-DxO error:', error);
    return await getHealthResponse(query, userContext, 100);
  }
}

async function consultClaude(query: string, context: any): Promise<string> {
  const prompt = `Patient: ${context.age || 'Age not specified'}\nSymptoms: ${query}\n\nProvide brief diagnosis (max 25 words): likely condition, confidence %, next step.`;
  
  try {
    if (!CLAUDE_API_KEY) {
      console.error('Claude API key missing');
      return 'Claude API key not configured';
    }

    console.log('ЁЯдЦ Calling Claude API...');
    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'x-api-key': CLAUDE_API_KEY,
        'Content-Type': 'application/json',
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-sonnet-4-20250514',
        max_tokens: 100,
        messages: [{ role: 'user', content: prompt }]
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('Claude API error:', response.status, errorText);
      return `Claude error: ${response.status}`;
    }
    
    const result = await response.json();
    console.log('тЬЕ Claude response received');
    return result.content?.[0]?.text || 'Claude: No response content';
  } catch (error) {
    console.error('Claude error:', error);
    return `Claude error: ${error.message}`;
  }
}

async function consultOpenAI(query: string, context: any): Promise<string> {
  try {
    if (!OPENAI_API_KEY) {
      console.error('OpenAI API key missing');
      return 'OpenAI API key not configured';
    }

    console.log('ЁЯдЦ Calling OpenAI API...');
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [{
          role: 'user',
          content: `Patient: ${context.age || 'Age not specified'}\nSymptoms: ${query}\n\nBrief diagnosis (max 25 words): condition, confidence, recommendation.`
        }],
        max_tokens: 100
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('OpenAI API error:', response.status, errorText);
      return `OpenAI error: ${response.status}`;
    }
    
    const result = await response.json();
    console.log('тЬЕ OpenAI response received');
    return result.choices?.[0]?.message?.content || 'OpenAI: No response content';
  } catch (error) {
    console.error('OpenAI error:', error);
    return `OpenAI error: ${error.message}`;
  }
}

async function consultGemini(query: string, context: any): Promise<string> {
  try {
    if (!GEMINI_API_KEY) {
      console.error('Gemini API key missing');
      return 'Gemini API key not configured';
    }

    console.log('ЁЯдЦ Calling Gemini API...');
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: `Patient: ${context.age || 'Age not specified'}\nSymptoms: ${query}\n\nBrief medical assessment (max 25 words): likely diagnosis, confidence level, next step.`
          }]
        }]
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API error:', response.status, errorText);
      return `Gemini error: ${response.status}`;
    }
    
    const result = await response.json();
    console.log('тЬЕ Gemini response received');
    return result.candidates?.[0]?.content?.parts?.[0]?.text || 'Gemini: No response content';
  } catch (error) {
    console.error('Gemini error:', error);
    return `Gemini error: ${error.message}`;
  }
}

async function synthesizeBriefDiagnosis(responses: string[], query: string): Promise<string> {
  const synthesis = `Based on ${responses.length} AI consultations:\n\n${responses.join('\n\n')}\n\n**CONSENSUS:** ${responses.length > 1 ? 'Multiple AIs suggest similar assessment' : 'Single AI analysis'}`;
  
  // Keep it under 100 words total
  if (synthesis.length > 400) {
    return synthesis.substring(0, 400) + '...';
  }
  
  return synthesis;
}

// Claude AI function
async function getHealthResponse(query: string, userContext: any = {}, wordLimit?: number): Promise<string> {
  try {
    const wordLimitInstruction = wordLimit ? `\n\nIMPORTANT: Limit your response to exactly ${wordLimit} words or less.` : '';
    
    const systemPrompt = `You are a helpful healthcare assistant for Indian users. Provide medical guidance but always include disclaimers to consult healthcare professionals. Keep responses concise but informative.

User context: ${JSON.stringify(userContext)}

Structure your response as:
1. Brief assessment
2. Recommendations  
3. Important disclaimer

Always end with: "тЪая╕П This is general guidance only. Please consult a qualified doctor for proper diagnosis and treatment."${wordLimitInstruction}`

    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'x-api-key': CLAUDE_API_KEY,
        'Content-Type': 'application/json',
        'anthropic-version': '2023-06-01',
        'Cache-Control': 'no-cache'
      },
      body: JSON.stringify({
        model: 'claude-sonnet-4-20250514',
        max_tokens: wordLimit ? Math.min(wordLimit * 2, 300) : 1000,
        messages: [
          {
            role: 'user',
            content: `${query} [${Date.now()}]`
          }
        ],
        system: systemPrompt
      })
    })
    
    const result = await response.json()
    
    // Handle potential API errors
    if (result.error) {
      throw new Error(`Claude API error: ${result.error.message}`)
    }
    
    // Return content safely
    return result.content?.[0]?.text || 'Unable to process request'
  } catch (error) {
    console.error('Error calling Claude API:', error)
    // Return fallback message
    return 'I apologize, but I\'m experiencing technical difficulties. Please try again in a moment. тЪая╕П This is general guidance only. Please consult a qualified doctor for proper diagnosis and treatment.'
  }
}

// Helper function to check if complex diagnosis is needed
function shouldUseMaiDxo(query: string, isVoice: boolean, isImage: boolean, user: User): boolean {
  const complexKeywords = [
    'diagnosis', 'diagnose', 'symptoms', 'disease', 'condition',
    'multiple symptoms', 'chronic', 'severe', 'urgent', 'emergency',
    'test', 'examination', 'specialist', 'treatment plan', 'chest pain',
    'shortness of breath', 'heart attack', 'stroke', 'bleeding', 'fever',
    'headache', 'stomach pain', 'back pain', 'dizziness', 'nausea'
  ];
  
  const lowerQuery = query.toLowerCase();
  const hasKeywords = complexKeywords.some(keyword => lowerQuery.includes(keyword));
  const isLongQuery = query.length > 100;
  const isComplex = hasKeywords || isLongQuery || isVoice || isImage;
  
  console.log(`ЁЯФН DIAGNOSIS TYPE CHECK:`);
  console.log(`Query: "${query}"`);
  console.log(`Complex: ${isComplex}`);
  console.log(`Reasons: Keywords=${hasKeywords}, Length=${isLongQuery}, Voice=${isVoice}, Image=${isImage}`);
  console.log(`User usage: ${user.usage_count}/20 free questions used`);
  
  return isComplex;
}

// Language keyboard helper
function getLanguageInlineKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "ЁЯЗоЁЯЗ│ Hindi (рд╣рд┐рдВрджреА)", callback_data: "lang_hi" },
        { text: "ЁЯЗмЁЯЗз English", callback_data: "lang_en" }
      ],
      [
        { text: "Tamil (родрооро┐ро┤рпН)", callback_data: "lang_ta" },
        { text: "Telugu (р░др▒Жр░▓р▒Бр░Чр▒Б)", callback_data: "lang_te" }
      ],
      [
        { text: "Kannada (р▓Хр▓ир│Нр▓ир▓б)", callback_data: "lang_kn" },
        { text: "Malayalam (р┤ор┤▓р┤пр┤╛р┤│р┤В)", callback_data: "lang_ml" }
      ],
      [
        { text: "Bengali (ржмрж╛ржВрж▓рж╛)", callback_data: "lang_bn" },
        { text: "Gujarati (ркЧрлБркЬрк░рк╛ркдрлА)", callback_data: "lang_gu" }
      ],
      [
        { text: "Marathi (рдорд░рд╛рдареА)", callback_data: "lang_mr" },
        { text: "Punjabi (рикрй░риЬри╛римрйА)", callback_data: "lang_pa" }
      ]
    ]
  };
}

// Clear conversation history for fresh responses
async function clearUserContext(chatId: string) {
  console.log(`ЁЯФД Clearing context for user ${chatId}`);
  await updateUserState(chatId, {
    last_used: new Date().toISOString()
  });
}

// Show main menu
async function showMainMenu(chatId: string, user: User) {
  const menuMessages: Record<string, string> = {
    'hi': 'ЁЯУЛ **рдореБрдЦреНрдп рдореЗрдиреВ**\n\nЁЯПе **DR247 AI рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ**',
    'ta': 'ЁЯУЛ **роорпБродройрпНроорпИ роорпЖройрпБ**\n\nЁЯПе **DR247 AI роЙроЯро▓рпНроиро▓ роЙродро╡ро┐ропро╛ро│ро░рпН**',
    'te': 'ЁЯУЛ **р░кр▒Нр░░р░зр░╛р░и р░ор▒Жр░ир▒В**\n\nЁЯПе **DR247 AI р░Жр░░р▒Лр░Чр▒Нр░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр▒Б**',
    'kn': 'ЁЯУЛ **р▓ор│Бр▓Цр│Нр▓п р▓ор│Жр▓ир│Б**\n\nЁЯПе **DR247 AI р▓Жр▓░р│Лр▓Чр│Нр▓п р▓╕р▓╣р▓╛р▓пр▓Х**',
    'ml': 'ЁЯУЛ **р┤кр╡Нр┤░р┤зр┤╛р┤и р┤ор╡Жр┤ир╡Б**\n\nЁЯПе **DR247 AI р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤╕р┤╣р┤╛р┤пр┤┐**',
    'bn': 'ЁЯУЛ **ржкрзНрж░ржзрж╛ржи ржорзЗржирзБ**\n\nЁЯПе **DR247 AI рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕рж╣рж╛ржпрж╝ржХ**',
    'gu': 'ЁЯУЛ **ркорлБркЦрлНркп ркорлЗркирлБ**\n\nЁЯПе **DR247 AI ркЖрк░рлЛркЧрлНркп рк╕рк╣рк╛ркпркХ**',
    'mr': 'ЁЯУЛ **рдореБрдЦреНрдп рдореЗрдиреВ**\n\nЁЯПе **DR247 AI рдЖрд░реЛрдЧреНрдп рд╕рд╣рд╛рдпреНрдпрдХ**',
    'pa': 'ЁЯУЛ **риорйБрй▒риЦ риорйАриирйВ**\n\nЁЯПе **DR247 AI ри╕ри┐ри╣рид ри╕ри╣ри╛риЗриХ**',
    'en': 'ЁЯУЛ **MAIN MENU**\n\nЁЯПе **DR247 AI HEALTH ASSISTANT**'
  };

  const menuMsg = menuMessages[user.language] || menuMessages['en'];

  const keyboard = {
    keyboard: [
      [{ text: 'ЁЯТм Health Question' }, { text: 'ЁЯТК Find Medicine Store' }],
      [{ text: 'ЁЯУ╕ Scan Report' }, { text: 'ЁЯМР LANG' }],
      [{ text: 'ЁЯУК Usage Stats' }, { text: 'тЭУ Help' }]
    ],
    resize_keyboard: true,
    persistent: true
  };

  await sendTelegramMessage(chatId, menuMsg, { reply_markup: keyboard });
}

// Telegram messaging functions
async function sendTelegramMessage(chatId: string, text: string, replyMarkup?: any) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        reply_markup: replyMarkup
      })
    })
    
    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.status}`)
    }
  } catch (error) {
    console.error('Error sending Telegram message:', error)
  }
}

async function sendTelegramAudio(chatId: string, audioBuffer: ArrayBuffer, caption?: string) {
  try {
    const formData = new FormData();
    formData.append('chat_id', chatId);
    formData.append('audio', new Blob([audioBuffer], { type: 'audio/wav' }), 'response.wav');
    if (caption) formData.append('caption', caption);

    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendAudio`, {
      method: 'POST',
      body: formData
    });

    if (!response.ok) {
      throw new Error(`Telegram audio API error: ${response.status}`);
    }
  } catch (error) {
    console.error('Error sending Telegram audio:', error);
  }
}

async function answerCallbackQuery(callbackQueryId: string, text?: string) {
  try {
    await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text || ''
      })
    })
  } catch (error) {
    console.error('Error answering callback query:', error)
  }
}

async function downloadTelegramFile(fileId: string): Promise<string> {
  try {
    // Get file path
    const fileResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getFile?file_id=${fileId}`)
    const fileData = await fileResponse.json()
    
    if (!fileData.ok) {
      throw new Error('Failed to get file info')
    }
    
    // Download file
    const downloadUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileData.result.file_path}`
    return downloadUrl
  } catch (error) {
    console.error('Error downloading file:', error)
    throw error
  }
}

// Message templates
function getLanguageSelectionMessage(): string {
  return `ЁЯПе Welcome to Dr247 AI Health Assistant!

Please select your preferred language:
1я╕ПтГг Hindi (рд╣рд┐рдВрджреА)
2я╕ПтГг English
3я╕ПтГг Tamil (родрооро┐ро┤рпН)
4я╕ПтГг Telugu (р░др▒Жр░▓р▒Бр░Чр▒Б)
5я╕ПтГг Kannada (р▓Хр▓ир│Нр▓ир▓б)
6я╕ПтГг Malayalam (р┤ор┤▓р┤пр┤╛р┤│р┤В)
7я╕ПтГг Bengali (ржмрж╛ржВрж▓рж╛)
8я╕ПтГг Gujarati (ркЧрлБркЬрк░рк╛ркдрлА)
9я╕ПтГг Marathi (рдорд░рд╛рдареА)
ЁЯФЯ Punjabi (рикрй░риЬри╛римрйА)

Reply with the number of your choice or use the buttons below.`
}

function getOnboardingMessage(language: string): string {
  const messages: Record<string, string> = {
    'hi': 'рдХреГрдкрдпрд╛ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдЬрд╛рдирдХрд╛рд░реА рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ:\n1. рдЖрдкрдХреА рдЙрдореНрд░\n2. рд▓рд┐рдВрдЧ (рдкреБрд░реБрд╖/рдорд╣рд┐рд▓рд╛/рдЕрдиреНрдп)\n3. рдХреЛрдИ рдореБрдЦреНрдп рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдорд╕реНрдпрд╛\n\nрдЙрджрд╛рд╣рд░рдг: "35 рд╕рд╛рд▓, рдкреБрд░реБрд╖, рдбрд╛рдпрдмрд┐рдЯреАрдЬ рдФрд░ рд╣рд╛рдИ BP"',
    'en': 'Please share the following information:\n1. Your age\n2. Gender (Male/Female/Other)\n3. Any major health conditions\n\nExample: "35 years, Male, Diabetes and High BP"',
    'ta': 'родропро╡рпБроЪрпЖропрпНродрпБ рокро┐ройрпНро╡ро░рпБроорпН родроХро╡ро▓рпНроХро│рпИрокрпН рокроХро┐ро░ро╡рпБроорпН:\n1. роЙроЩрпНроХро│рпН ро╡ропродрпБ\n2. рокро╛ро▓ро┐ройроорпН (роЖрогрпН/рокрпЖрогрпН/рооро▒рпНро▒ро╡рпИ)\n3. роПродрпЗройрпБроорпН роорпБроХрпНроХро┐роп роЙроЯро▓рпНроиро▓рокрпН рокро┐ро░роЪрпНроЪро┐ройрпИроХро│рпН',
    'te': 'р░жр░пр░Ър▒Зр░╕р░┐ р░И р░Хр▒Нр░░р░┐р░Вр░жр░┐ р░╕р░ор░╛р░Ър░╛р░░р░╛р░ир▒Нр░ир░┐ р░кр░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐:\n1. р░ор▒А р░╡р░пр░╕р▒Нр░╕р▒Б\n2. р░▓р░┐р░Вр░Чр░В (р░кр▒Бр░░р▒Бр░╖р▒Бр░бр▒Б/р░╕р▒Нр░др▒Нр░░р▒А/р░Зр░др░░)\n3. р░Пр░╡р▒Ир░ир░╛ р░кр▒Нр░░р░зр░╛р░и р░Жр░░р▒Лр░Чр▒Нр░п р░╕р░ор░╕р▒Нр░пр░▓р▒Б'
  }
  
  return messages[language] || messages['en']
}

// Message handlers
async function handleLanguageSelection(chatId: string, messageText: string, user: User) {
  const choice = messageText.trim().replace(/[^\d]/g, '') // Remove all non-digits
  const languageMap: Record<string, keyof typeof LANGUAGE_CALLBACKS> = {
    '1': 'lang_hi',
    '2': 'lang_en',
    '3': 'lang_ta',
    '4': 'lang_te',
    '5': 'lang_kn',
    '6': 'lang_ml',
    '7': 'lang_bn',
    '8': 'lang_gu',
    '9': 'lang_mr',
    '10': 'lang_pa'
  }
  
  console.log(`ЁЯФН Language selection - Raw input: "${messageText}", Cleaned: "${choice}"`);
  
  const languageKey = languageMap[choice]
  const language = languageKey ? LANGUAGE_CALLBACKS[languageKey] : null
  
  if (!language) {
    console.log(`тЭМ Invalid language choice: "${choice}"`);
    const keyboard = getLanguageInlineKeyboard()
    await sendTelegramMessage(chatId, getTranslation('invalidLanguageChoice', 'en'), keyboard)
    return
  }
  
  console.log(`тЬЕ Valid language selected: ${language.name}`);
  await updateUserState(chatId, {
    language: language.sarvam,
    language_name: language.name,
    state: 'onboarding'
  })
  
  const onboardingMsg = getOnboardingMessage(language.sarvam)
  await sendTelegramMessage(chatId, onboardingMsg)
}

async function handleCallbackQuery(callbackQuery: any) {
  const chatId = callbackQuery.message.chat.id.toString()
  const data = callbackQuery.data
  
  // Answer the callback query to stop loading animation
  await answerCallbackQuery(callbackQuery.id)
  
  try {
    const user = await getOrCreateUser(chatId)
    
    if (data.startsWith('lang_')) {
      const language = LANGUAGE_CALLBACKS[data as keyof typeof LANGUAGE_CALLBACKS]
      
      if (language) {
        await updateUserState(chatId, {
          language: language.sarvam,
          language_name: language.name,
          state: 'onboarding'
        })
        
        const onboardingMsg = getOnboardingMessage(language.sarvam)
        await sendTelegramMessage(chatId, onboardingMsg)
      }
    } else if (data === 'use_simple') {
      // Handle using simple diagnosis instead of complex
      if (user.pending_query) {
        console.log(`ЁЯТм User ${chatId} chose simple diagnosis over complex`);
        
        // Check if they have free questions left
        if (user.usage_count >= 20 && user.plan_type === 'free') {
          await sendTelegramMessage(chatId, 'ЁЯЪл **NO FREE QUESTIONS LEFT!** Please upgrade to continue.');
          return;
        }
        
        const simpleResponse = await getHealthResponse(user.pending_query, {
          age: user.onboarding_info,
          language: user.language_name
        });
        
        const questionNum = user.usage_count + 1;
        const remainingQuestions = Math.max(0, 20 - questionNum);
        const responseWithUsage = `ЁЯУЛ **QUESTION #${questionNum}**\nтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\n\n${simpleResponse}\n\nтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\nЁЯУК **${remainingQuestions} free questions remaining**`;
        
        await sendTelegramMessage(chatId, responseWithUsage);
        await updateUserState(chatId, { 
          state: 'ready',
          pending_query: null,
          usage_count: questionNum
        });
      }
    } else if (data.startsWith('more_aushadhi_')) {
      // Handle "Show More" for Jan Aushadhi centers
      const parts = data.split('_');
      const pincode = parts[2];
      await handleJanAushadhiSearch(chatId, pincode);
    } else if (data === 'search_new_pincode') {
      // Handle search new pincode
      await sendTelegramMessage(chatId, getTranslation('janAushadhiPrompt', user.language));
    }
  } catch (error) {
    console.error('Error handling callback query:', error)
  }
}

async function handleOnboarding(chatId: string, messageText: string, user: User) {
  await updateUserState(chatId, {
    onboarding_info: messageText,
    state: 'ready'
  })
  
  const welcomeMessages: Record<string, string> = {
    'hi': 'тЬЕ **рдзрдиреНрдпрд╡рд╛рдж!** ЁЯОЙ\n\nЁЯй║ **рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ**\n\n**ЁЯУЛ рдореЗрдиреВ рд╡рд┐рдХрд▓реНрдк:**\nЁЯТм /health - рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреНрд░рд╢реНрди\nЁЯТК /janaushadhi - рджрд╡рд╛ рдХреА рджреБрдХрд╛рди\nЁЯУ╕ /scan - рд░рд┐рдкреЛрд░реНрдЯ рд╕реНрдХреИрди\nЁЯМР /lang - рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ',
    'ta': 'тЬЕ **роиройрпНро▒ро┐!** ЁЯОЙ\n\nЁЯй║ **роЙроЯро▓рпНроиро▓роорпН рокро▒рпНро▒ро┐ роХрпЗро│рпБроЩрпНроХро│рпН**\n\n**ЁЯУЛ роорпЖройрпБ ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпН:**\nЁЯТм /health - роЙроЯро▓рпНроиро▓ роХрпЗро│рпНро╡ро┐\nЁЯТК /janaushadhi - рооро░рпБроирпНродрпБ роХроЯрпИ\nЁЯУ╕ /scan - роЕро▒ро┐роХрпНроХрпИ ро╕рпНроХрпЗройрпН\nЁЯМР /lang - роорпКро┤ро┐ рооро╛ро▒рпНро▒рпБ',
    'te': 'тЬЕ **р░зр░ир▒Нр░пр░╡р░╛р░жр░╛р░▓р▒Б!** ЁЯОЙ\n\nЁЯй║ **р░Жр░░р▒Лр░Чр▒Нр░п р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░Ер░бр░Чр░Вр░бр░┐**\n\n**ЁЯУЛ р░ор▒Жр░ир▒В р░Ор░Вр░кр░┐р░Хр░▓р▒Б:**\nЁЯТм /health - р░Жр░░р▒Лр░Чр▒Нр░п р░кр▒Нр░░р░╢р▒Нр░и\nЁЯТК /janaushadhi - р░ор░Вр░жр▒Бр░▓ р░жр▒Бр░Хр░╛р░гр░В\nЁЯУ╕ /scan - р░░р░┐р░кр▒Лр░░р▒Нр░Яр▒Н р░╕р▒Нр░Хр░╛р░ир▒Н\nЁЯМР /lang - р░нр░╛р░╖ р░ор░╛р░░р▒Нр░Ър▒Б',
    'kn': 'тЬЕ **р▓зр▓ир│Нр▓пр▓╡р▓╛р▓жр▓Чр▓│р│Б!** ЁЯОЙ\n\nЁЯй║ **р▓Жр▓░р│Лр▓Чр│Нр▓п р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓Хр│Зр▓│р▓┐**\n\n**ЁЯУЛ р▓ор│Жр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓Чр▓│р│Б:**\nЁЯТм /health - р▓Жр▓░р│Лр▓Чр│Нр▓п р▓кр│Нр▓░р▓╢р│Нр▓ир│Ж\nЁЯТК /janaushadhi - р▓Фр▓╖р▓зр▓┐ р▓Ер▓Вр▓Чр▓бр▓┐\nЁЯУ╕ /scan - р▓╡р▓░р▓жр▓┐ р▓╕р│Нр▓Хр│Нр▓пр▓╛р▓ир│Н\nЁЯМР /lang - р▓нр▓╛р▓╖р│Ж р▓мр▓жр▓▓р▓┐р▓╕р▓┐',
    'ml': 'тЬЕ **р┤ир┤ир╡Нр┤жр┤┐!** ЁЯОЙ\n\nЁЯй║ **р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛ р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х**\n\n**ЁЯУЛ р┤ор╡Жр┤ир╡Б р┤Ур┤кр╡Нр┤╖р┤ир╡Бр┤Хр╡╛:**\nЁЯТм /health - р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤Ър╡Лр┤жр╡Нр┤пр┤В\nЁЯТК /janaushadhi - р┤ор┤░р╡Бр┤ир╡Нр┤ир╡Н р┤Хр┤Я\nЁЯУ╕ /scan - р┤▒р┤┐р┤кр╡Нр┤кр╡Лр╡╝р┤Яр╡Нр┤Яр╡Н р┤╕р╡Нр┤Хр┤╛р╡╗\nЁЯМР /lang - р┤нр┤╛р┤╖ р┤ор┤╛р┤▒р╡Нр┤▒р╡Бр┤Х',
    'bn': 'тЬЕ **ржзржирзНржпржмрж╛ржж!** ЁЯОЙ\n\nЁЯй║ **рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрзНрж░рж╢рзНржи ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи**\n\n**ЁЯУЛ ржорзЗржирзБ ржЕржкрж╢ржи:**\nЁЯТм /health - рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрзНрж░рж╢рзНржи\nЁЯТК /janaushadhi - ржУрж╖рзБржзрзЗрж░ ржжрзЛржХрж╛ржи\nЁЯУ╕ /scan - рж░рж┐ржкрзЛрж░рзНржЯ рж╕рзНржХрзНржпрж╛ржи\nЁЯМР /lang - ржнрж╛рж╖рж╛ ржкрж░рж┐ржмрж░рзНрждржи',
    'gu': 'тЬЕ **ркЖркнрк╛рк░!** ЁЯОЙ\n\nЁЯй║ **ркЖрк░рлЛркЧрлНркп рккрлНрк░рк╢рлНркирлЛ рккрлВркЫрлЛ**\n\n**ЁЯУЛ ркорлЗркирлБ рк╡рк┐ркХрк▓рлНрккрлЛ:**\nЁЯТм /health - ркЖрк░рлЛркЧрлНркп рккрлНрк░рк╢рлНрки\nЁЯТК /janaushadhi - ркжрк╡рк╛ркирлА ркжрлБркХрк╛рки\nЁЯУ╕ /scan - рк░рк┐рккрлЛрк░рлНркЯ рк╕рлНркХрлЗрки\nЁЯМР /lang - ркнрк╛рк╖рк╛ ркмркжрк▓рлЛ',
    'mr': 'тЬЕ **рдзрдиреНрдпрд╡рд╛рдж!** ЁЯОЙ\n\nЁЯй║ **рдЖрд░реЛрдЧреНрдп рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рд╛**\n\n**ЁЯУЛ рдореЗрдиреВ рдкрд░реНрдпрд╛рдп:**\nЁЯТм /health - рдЖрд░реЛрдЧреНрдп рдкреНрд░рд╢реНрди\nЁЯТК /janaushadhi - рдФрд╖рдз рджреБрдХрд╛рди\nЁЯУ╕ /scan - рдЕрд╣рд╡рд╛рд▓ рд╕реНрдХреЕрди\nЁЯМР /lang - рднрд╛рд╖рд╛ рдмрджрд▓рд╛',
    'pa': 'тЬЕ **ризрй░риири╡ри╛риж!** ЁЯОЙ\n\nЁЯй║ **ри╕ри┐ри╣рид ри╕ри╡ри╛ри▓ рикрйБрй▒риЫрйЛ**\n\n**ЁЯУЛ риорйАриирйВ ри╡ри┐риХри▓рик:**\nЁЯТм /health - ри╕ри┐ри╣рид ри╕ри╡ри╛ри▓\nЁЯТК /janaushadhi - рижри╡ри╛риИ рижрйБриХри╛рии\nЁЯУ╕ /scan - ри░ри┐рикрйЛри░риЯ ри╕риХрйИрии\nЁЯМР /lang - ринри╛ри╕ри╝ри╛ римрижри▓рйЛ',
    'en': 'тЬЕ **THANK YOU!** ЁЯОЙ\n\nЁЯй║ **ASK HEALTH QUESTIONS**\n\n**ЁЯУЛ MENU OPTIONS:**\nЁЯТм /health - Ask health question\nЁЯТК /janaushadhi - Find medicine stores\nЁЯУ╕ /scan - Scan medical reports\nЁЯМР /lang - Change language'
  };
  
  const welcomeMsg = welcomeMessages[user.language] || welcomeMessages['en'];
  
  // Send menu with reply keyboard
  const keyboard = {
    keyboard: [
      [{ text: 'ЁЯТм Health Question' }, { text: 'ЁЯТК Find Medicine Store' }],
      [{ text: 'ЁЯУ╕ Scan Report' }, { text: 'ЁЯМР LANG' }]
    ],
    resize_keyboard: true,
    persistent: true
  };
  
  await sendTelegramMessage(chatId, welcomeMsg, { reply_markup: keyboard })
}

async function handleLanguageChange(chatId: string, user: User) {
  await updateUserState(chatId, { 
    state: 'language_selection',
    language: '',
    language_name: '',
    pending_query: null
  })
  const keyboard = getLanguageInlineKeyboard()
  await sendTelegramMessage(chatId, getLanguageSelectionMessage(), keyboard)
}

// Payment handling
async function handlePaymentRequest(chatId: string, query: string, user: User, isVoice = false, isImage = false) {
  console.log(`ЁЯТ░ PAYMENT REQUEST TRIGGERED`);
  console.log(`User: ${chatId}, Complex diagnoses used: ${user.paid_complex_count}`);
  
  // Clear context for fresh response
  await clearUserContext(chatId);
  
  // First 2 complex diagnoses are free (paid_complex_count 0 and 1)
  if (user.paid_complex_count < 2) {
    // First 2 complex diagnoses are free
    console.log(`ЁЯЖУ Providing FREE complex diagnosis ${user.paid_complex_count + 1}/2 for user ${chatId}`);
    const analysisType = isVoice ? 'ЁЯОд Voice + AI Medical Panel' : isImage ? 'ЁЯУ╕ Image + AI Medical Panel' : 'ЁЯдЦ AI Medical Panel';
    await sendTelegramMessage(chatId, `ЁЯЖУ FREE Complex Diagnosis\n\n${analysisType} analysis...`);
    
    console.log(`ЁЯдЦ Starting MAI-DxO orchestrator for query: "${query}"`);
    const diagnosis = await maiDxoOrchestrator(query, {
      age: user.onboarding_info,
      language: user.language_name,
      isFirstFree: true,
      isVoice,
      isImage
    });
    
    // For voice queries, also send audio response
    if (isVoice && user.language !== 'en') {
      try {
        const translatedResponse = await translateText(diagnosis, 'en', user.language);
        const audioBuffer = await generateAudio(translatedResponse, user.language);
        await sendTelegramAudio(chatId, audioBuffer, translatedResponse);
      } catch (error) {
        console.error('Voice response error:', error);
        await sendTelegramMessage(chatId, diagnosis);
      }
    } else {
      await sendTelegramMessage(chatId, diagnosis);
    }
    
    await updateUserState(chatId, { 
      free_complex_used: true,
      paid_complex_count: user.paid_complex_count + 1
    });
    console.log(`тЬЕ Free complex diagnosis ${user.paid_complex_count + 1}/2 completed for user ${chatId}`);
  } else {
    // Paid diagnosis required
    console.log(`ЁЯТ│ Requesting payment for user ${chatId}`);
    // Check if we're in test mode
    const isTestMode = Deno.env.get('RAZORPAY_MODE') === 'test';
    
    if (isTestMode) {
      // For test mode, provide test instructions
      await sendTelegramMessage(chatId, 
        `ЁЯТ░ **COMPLEX AI DIAGNOSIS - тВ╣200**\n\nЁЯФм **ADVANCED MULTI-AI MEDICAL PANEL ANALYSIS**\n\nтЪая╕П **TEST MODE ACTIVE**\n\nтЬЕ To simulate payment, type: **paid**\nтЭМ Payment links don't work in test mode`,
        {
          inline_keyboard: [
            [{ text: "тЬЕ SIMULATE PAYMENT (TYPE 'paid')", callback_data: "test_payment_info" }],
            [{ text: "ЁЯТм **GET BASIC GUIDANCE (FREE)**", callback_data: "skip_payment" }]
          ]
        }
      );
      
      // Skip the payment link message in test mode
      await updateUserState(chatId, { state: 'awaiting_complex_payment', pending_query: query });
      return;
    } else {
      // Live mode - use payment links
      await sendTelegramMessage(chatId, 
        `ЁЯТ░ **COMPLEX AI DIAGNOSIS - тВ╣200**\n\nЁЯФм **ADVANCED MULTI-AI MEDICAL PANEL ANALYSIS**\nЁЯУК **DIFFERENTIAL DIAGNOSIS WITH PROBABILITY RANKING**\nЁЯй║ **OPTIMIZED TEST RECOMMENDATIONS**\nЁЯТб **COST-EFFECTIVE CARE PATHWAY**\n\n**ЁЯСЗ CHOOSE AN OPTION:**`,
        {
          inline_keyboard: [
            [{ text: "ЁЯТ│ **PAY тВ╣200 FOR ANALYSIS**", url: "https://rzp.io/rzp/1RrG1ddu" }],
            [{ text: "ЁЯТм **GET BASIC GUIDANCE (FREE)**", callback_data: "skip_payment" }]
          ]
        }
      );
    }
    
    // Send payment confirmation instructions with time limit warning
    await sendTelegramMessage(chatId, 
      `тП░ **IMPORTANT: Complete payment within 10 minutes**\n\nЁЯУ▒ **After payment, type "paid" or send screenshot**\n\nЁЯТб **Payment Tips:**\nтАв Use UPI ID directly if link fails\nтАв Our UPI: movemtechnologiesprivatelimit@paytm\nтАв After manual payment, send screenshot\n\nтЭМ **Payment failed? Type "retry" for new link**`
    );
    
    // Set user state to awaiting payment
    await updateUserState(chatId, { state: 'awaiting_complex_payment', pending_query: query });
  }
}

async function handlePaymentVerification(chatId: string, user: User) {
  if (user.state === 'awaiting_payment' && user.pending_query) {
    await sendTelegramMessage(chatId, 
      `тЬЕ Payment received! Analyzing with AI medical panel...`
    );
    
    const diagnosis = await maiDxoOrchestrator(user.pending_query, {
      age: user.onboarding_info,
      language: user.language_name,
      isPaid: true
    });
    
    await sendTelegramMessage(chatId, diagnosis);
    await updateUserState(chatId, { 
      state: 'ready',
      pending_query: null,
      paid_complex_count: (user.paid_complex_count || 0) + 1
    });
  }
}

async function handleHealthQuery(chatId: string, messageText: string, user: User) {
  try {
    console.log(`ЁЯУЭ HEALTH QUERY RECEIVED from ${chatId}: "${messageText}"`);
    console.log(`User stats: ${user.usage_count}/20 free questions, Plan: ${user.plan_type}`);
    
    // Check usage limits for simple queries
    if (user.usage_count >= 20 && user.plan_type === 'free') {
      await sendTelegramMessage(chatId, 
        `ЁЯЪл **FREE QUESTIONS EXHAUSTED!**\n\nтЬЕ **You've used all 20 free questions**\n\nЁЯТ│ **UPGRADE OPTIONS:**\n\nЁЯУ▒ **тВ╣100/month** - 20 more questions\nЁЯдЦ **тВ╣200/question** - Complex AI diagnosis\n\n**ЁЯСЗ CHOOSE:**`,
        {
          inline_keyboard: [
            [{ text: "ЁЯТ│ **PAY тВ╣100/MONTH - 20 MORE QUESTIONS**", url: "https://rzp.io/rzp/tGVFc9WT" }],
            [{ text: "ЁЯдЦ **PAY тВ╣200 COMPLEX DIAGNOSIS**", callback_data: "pay_complex" }]
          ]
        }
      );
      
      // Send payment confirmation instructions with time limit warning
      await sendTelegramMessage(chatId, 
        `тП░ **IMPORTANT: Complete payment within 10 minutes**\n\nЁЯУ▒ **After payment, type "paid" or send screenshot**\n\nЁЯТб **Payment Tips:**\nтАв Use UPI ID directly if link fails\nтАв Our UPI: movemtechnologiesprivatelimit@paytm\nтАв After manual payment, send screenshot\n\nтЭМ **Payment failed? Type "retry" for new link**`
      );
      
      await updateUserState(chatId, { state: 'awaiting_subscription', pending_query: messageText });
      return;
    }
    
    // Clear context for fresh response
    await clearUserContext(chatId);
    
    const userContext = {
      age: user.onboarding_info,
      language: user.language_name,
      previous_conversations: [],
      timestamp: Date.now()
    }
    
    // Check if complex diagnosis is needed
    if (shouldUseMaiDxo(messageText, false, false, user)) {
      console.log(`ЁЯЪА Routing to COMPLEX diagnosis (тВ╣200)`);
      await sendTelegramMessage(chatId, 
        `ЁЯдЦ **COMPLEX DIAGNOSIS REQUIRED - тВ╣200**\n\nЁЯФм **ADVANCED MULTI-AI ANALYSIS**\nЁЯУК **DETAILED DIAGNOSIS**\nЁЯТб **PERSONALIZED RECOMMENDATIONS**\n\n**ЁЯСЗ CHOOSE:**`,
        {
          inline_keyboard: [
            [{ text: "ЁЯТ│ **PAY тВ╣200 FOR ANALYSIS**", url: "https://rzp.io/rzp/1RrG1ddu" }],
            [{ text: "ЁЯТм **GET BASIC ANSWER (FREE)**", callback_data: "use_simple" }]
          ]
        }
      );
      await updateUserState(chatId, { state: 'awaiting_complex_payment', pending_query: messageText });
      return;
    }
    
    // Simple health query - use Claude only
    console.log(`ЁЯТм Routing to SIMPLE diagnosis (Claude only)`);
    const healthResponse = await getHealthResponse(messageText, userContext);
    
    const questionNum = user.usage_count + 1;
    const remainingQuestions = Math.max(0, 20 - questionNum);
    
    const responseWithUsage = `ЁЯУЛ **QUESTION #${questionNum}**\nтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\n\n${healthResponse}\n\nтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\nЁЯУК **${remainingQuestions} free questions remaining**`;
    
    await sendTelegramMessage(chatId, responseWithUsage);
    
    const now = new Date().toISOString();
    await updateUserState(chatId, {
      last_used: now,
      usage_count: questionNum
    });
    console.log(`тЬЕ Simple diagnosis completed for user ${chatId} (${questionNum}/10)`);
    
  } catch (error) {
    console.error('Error handling health query:', error);
    await sendTelegramMessage(chatId, getTranslation('errorGeneral', user.language));
  }
}

async function handleVoiceMessage(chatId: string, voice: any, user: User) {
  try {
    console.log(`ЁЯОд Voice message received from ${chatId}`);
    
    // Check if user has microphone access
    await sendTelegramMessage(chatId, getTranslation('voiceProcessing', user.language));
    
    // Download voice file
    const voiceUrl = await downloadTelegramFile(voice.file_id);
    
    // Transcribe using Sarvam STT
    const transcript = await transcribeAudio(voiceUrl, user.language);
    
    // Translate to English if needed
    let englishQuery = transcript;
    if (user.language !== 'en') {
      englishQuery = await translateText(transcript, user.language, 'en');
    }
    
    console.log(`ЁЯОд Voice transcript: "${transcript}" тЖТ "${englishQuery}"`);
    
    await sendTelegramMessage(chatId, `ЁЯОд **HEARD YOU SAY:** "${transcript}"\n\nЁЯдЦ **ANALYZING...** Please wait...`);
    
    // Voice always triggers complex diagnosis
    console.log(`ЁЯЪА Voice routing to COMPLEX diagnosis (MAI-DxO)`);
    await handlePaymentRequest(chatId, englishQuery, user, true, false);
    
  } catch (error) {
    console.error('Error handling voice message:', error);
    await sendTelegramMessage(chatId, getTranslation('voiceError', user.language));
  }
}

async function handleImageMessage(chatId: string, photo: any, user: User) {
  try {
    console.log(`ЁЯУ╕ Image message received from ${chatId}`);
    
    // For now, treat as complex medical scan/document
    const imageQuery = "Medical image/scan analysis requested";
    
    await sendTelegramMessage(chatId, getTranslation('processingImage', user.language));
    
    // Images always trigger complex diagnosis
    console.log(`ЁЯЪА Image routing to COMPLEX diagnosis (MAI-DxO)`);
    await handlePaymentRequest(chatId, imageQuery, user, false, true);
    
  } catch (error) {
    console.error('Error handling image message:', error);
    await sendTelegramMessage(chatId, getTranslation('imageError', user.language));
  }
}

async function handleJanAushadhiSearch(chatId: string, pincode: string) {
  try {
    const user = await getOrCreateUser(chatId);
    
    // Query Supabase jan_aushadhi_centers table
    const { data: stores, error } = await supabase
      .from('jan_aushadhi_centers')
      .select('name, contact, state_name')
      .eq('pin_code', pincode)
      .limit(2);
    
    if (error) throw error;
    
    if (stores.length === 0) {
      const noStoresMsg = `тЭМ No stores found in the pincode. Pls search nearby pincodes`;
      await sendTelegramMessage(chatId, noStoresMsg);
      return;
    }
    
    let message = user.language === 'hi' 
      ? `ЁЯТК **рдЬрди рдФрд╖рдзрд┐ - ${pincode}**\n\n`
      : `ЁЯТК **JAN AUSHADHI - ${pincode}**\n\n`;
    
    stores.forEach((store, i) => {
      message += `${i + 1}. ${store.name}\n`;
      message += `ЁЯУЮ ${store.contact}\n`;
      message += `ЁЯУН ${store.state_name}\n\n`;
    });
    
    const keyboard = {
      inline_keyboard: [
        [{ text: "ЁЯФД Search Another Pincode", callback_data: "search_new_pincode" }]
      ]
    };
    
    await sendTelegramMessage(chatId, message, { reply_markup: keyboard });
    
  } catch (error) {
    console.error('Error searching Jan Aushadhi stores:', error);
    await sendTelegramMessage(chatId, 'тЭМ Error finding stores / рд╕реНрдЯреЛрд░ рдЦреЛрдЬрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐');
  }
}

// Webhook handler
async function handleTelegramUpdate(update: TelegramUpdate) {
  // Handle callback queries (button presses)
  if (update.callback_query) {
    await handleCallbackQuery(update.callback_query)
    return
  }
  
  if (!update.message) return
  
  const chatId = update.message.chat.id.toString()
  const messageText = update.message.text
  const voice = update.message.voice
  const photo = update.message.photo
  const document = update.message.document
  
  console.log(`Message from ${chatId}: ${messageText || voice ? 'voice' : photo ? 'photo' : document ? 'document' : 'media'}`)
  
  try {
    const user = await getOrCreateUser(chatId)
    
    // Handle voice messages
    if (voice) {
      await handleVoiceMessage(chatId, voice, user)
      return
    }
    
    // Check if user is awaiting payment confirmation
    if (user.state === 'awaiting_complex_payment' || user.state === 'awaiting_subscription') {
      // Handle payment screenshots
      if (photo || document) {
        const messageType = user.state === 'awaiting_complex_payment' ? 'complex' : 'subscription';
        
        if (messageType === 'complex' && user.pending_query) {
          await sendTelegramMessage(chatId, 'тЬЕ **PAYMENT RECEIVED!** Analyzing with AI medical panel...');
          
          const diagnosis = await maiDxoOrchestrator(user.pending_query, {
            age: user.onboarding_info,
            language: user.language_name,
            isPaid: true
          });
          
          await sendTelegramMessage(chatId, diagnosis);
          await updateUserState(chatId, { 
            state: 'ready',
            pending_query: null,
            paid_complex_count: (user.paid_complex_count || 0) + 1
          });
        } else if (messageType === 'subscription') {
          await sendTelegramMessage(chatId, 'тЬЕ **SUBSCRIPTION ACTIVATED!**\n\nЁЯОЙ **20 MORE QUESTIONS ADDED**');
          await updateUserState(chatId, { 
            state: 'ready',
            plan_type: 'premium',
            pending_query: null,
            usage_count: 0
          });
        }
        return;
      }
    }
    
    // Handle photo messages
    if (photo && photo.length > 0) {
      await handleImageMessage(chatId, photo, user)
      return
    }
    
    // Handle document messages (scans, reports)
    if (document) {
      await handleImageMessage(chatId, document, user)
      return
    }
    
    // Handle text messages
    if (!messageText) return
    
    // Handle different user states
    switch (user.state) {
      case 'language_selection':
        await handleLanguageSelection(chatId, messageText, user)
        break
        
      case 'onboarding':
        await handleOnboarding(chatId, messageText, user)
        break
        
      case 'ready':
        // Handle keyboard button presses
        if (messageText === 'ЁЯТм Health Question' || messageText.toLowerCase() === '/health') {
          await sendTelegramMessage(chatId, getTranslation('healthQuestionPrompt', user.language));
        } else if (messageText === 'ЁЯТК Find Medicine Store' || messageText.startsWith('/janaushadhi')) {
          const pincode = messageText.replace('/janaushadhi', '').replace('ЁЯТК Find Medicine Store', '').trim();
          if (pincode && pincode.length === 6 && /^\d+$/.test(pincode)) {
            await handleJanAushadhiSearch(chatId, pincode);
          } else {
            await sendTelegramMessage(chatId, getTranslation('janAushadhiPrompt', user.language));
          }
        } else if (messageText === 'ЁЯУ╕ Scan Report' || messageText.toLowerCase() === '/scan') {
          await sendTelegramMessage(chatId, getTranslation('scanReportPrompt', user.language));
        } else if (messageText === 'ЁЯМР Language' || messageText === 'ЁЯМР LANG' || messageText.toLowerCase() === 'lang' || messageText === '/lang') {
          await handleLanguageChange(chatId, user);
        } else if (messageText.toLowerCase() === '/menu' || messageText === '/help') {
          await showMainMenu(chatId, user);
        } else if (messageText.toLowerCase() === '/start') {
          // Handle /start command - just show menu without incrementing usage
          await showMainMenu(chatId, user);
        } else if (/^\d{6}$/.test(messageText.trim())) {
          // Direct pincode entry
          await handleJanAushadhiSearch(chatId, messageText.trim());
        } else {
          await handleHealthQuery(chatId, messageText, user);
        }
        break
        
      case 'awaiting_subscription':
        if (messageText.toLowerCase().includes('paid') || 
            messageText.toLowerCase().includes('screenshot') || 
            messageText.toLowerCase().includes('done') ||
            messageText.match(/[0-9]{12,}/)) {  // Matches transaction IDs
          await sendTelegramMessage(chatId, 'тЬЕ **SUBSCRIPTION ACTIVATED!**\n\nЁЯОЙ **20 MORE QUESTIONS ADDED**');
          await updateUserState(chatId, { 
            state: 'ready',
            plan_type: 'premium',
            pending_query: null,
            usage_count: 0  // Reset usage count for new 20 questions
          });
        } else if (messageText.toLowerCase().includes('retry')) {
          // Resend payment link
          await sendTelegramMessage(chatId, 
            `ЁЯФД **NEW PAYMENT LINK**\n\nЁЯУ▒ **тВ╣100/MONTH - 20 MORE QUESTIONS**\n\n**ЁЯСЗ CLICK TO PAY:**`,
            {
              inline_keyboard: [
                [{ text: "ЁЯТ│ **PAY тВ╣100/MONTH**", url: "https://razorpay.me/@movemtechnologiesprivatelimit?amount=ZFm4ghdmeB6pF5PK8Ki64w%3D%3D" }],
                [{ text: "ЁЯдЦ **PAY тВ╣200 COMPLEX DIAGNOSIS**", callback_data: "pay_complex" }]
              ]
            }
          );
          await sendTelegramMessage(chatId, 
            `тП░ **Complete within 10 minutes!**\nЁЯУ▒ **After payment, type "paid" or send screenshot**`
          );
        } else {
          // Auto-reset if user sends new message
          await sendTelegramMessage(chatId, 'ЁЯФД **Starting fresh session...**');
          await updateUserState(chatId, { state: 'ready', pending_query: null });
          await handleHealthQuery(chatId, messageText, user);
        }
        break
        
      case 'awaiting_complex_payment':
        if (messageText.toLowerCase().includes('paid') || 
            messageText.toLowerCase().includes('screenshot') || 
            messageText.toLowerCase().includes('done') ||
            messageText.match(/[0-9]{12,}/)) {  // Matches transaction IDs
          if (user.pending_query) {
            await sendTelegramMessage(chatId, 'тЬЕ **PAYMENT RECEIVED!** Analyzing with AI medical panel...');
            
            const diagnosis = await maiDxoOrchestrator(user.pending_query, {
              age: user.onboarding_info,
              language: user.language_name,
              isPaid: true
            });
            
            await sendTelegramMessage(chatId, diagnosis);
            await updateUserState(chatId, { 
              state: 'ready',
              pending_query: null,
              paid_complex_count: (user.paid_complex_count || 0) + 1
            });
          }
        } else if (messageText.toLowerCase().includes('retry') || messageText.toLowerCase().includes('upi')) {
          // Resend payment options
          await sendTelegramMessage(chatId, 
            `ЁЯТ░ **PAYMENT OPTIONS - тВ╣200**\n\n**Option 1: Payment Link**`,
            {
              inline_keyboard: [
                [{ text: "ЁЯТ│ **PAY тВ╣200 VIA LINK**", url: "https://razorpay.me/@movemtechnologiesprivatelimit?amount=ExQs%2Fv%2FDDS71hestyV8B7g%3D%3D" }]
              ]
            }
          );
          await sendTelegramMessage(chatId, 
            `**Option 2: Direct UPI Transfer**\n\nЁЯУ▒ **UPI ID:** \`movemtechnologiesprivatelimit@paytm\`\nЁЯТ░ **Amount:** тВ╣200\n\nтЬЕ After payment, send screenshot with transaction ID`
          );
        } else {
          // Auto-reset if user sends new message
          await sendTelegramMessage(chatId, 'ЁЯФД **Starting fresh session...**');
          await updateUserState(chatId, { state: 'ready', pending_query: null });
          await handleHealthQuery(chatId, messageText, user);
        }
        break
        
      default:
        // New user or reset - show language selection with keyboard
        await updateUserState(chatId, { state: 'language_selection' })
        const keyboard = getLanguageInlineKeyboard()
        await sendTelegramMessage(chatId, getLanguageSelectionMessage(), keyboard)
        break
    }
  } catch (error) {
    console.error('Error handling update:', error)
    await sendTelegramMessage(chatId, 'Sorry, something went wrong. Please try again.')
  }
}

// Main Edge Function
serve(async (req) => {
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Razorpay-Signature'
  }
  
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }
  
  if (req.method === 'GET') {
    const url = new URL(req.url)
    
    // Debug endpoint to check env vars
    if (url.pathname.includes('/debug')) {
      return new Response(JSON.stringify({ 
        webhook_secret_exists: !!Deno.env.get('RAZORPAY_WEBHOOK_SECRET'),
        webhook_secret_length: (Deno.env.get('RAZORPAY_WEBHOOK_SECRET') || '').length,
        test_mode: Deno.env.get('RAZORPAY_MODE'),
        telegram_token_exists: !!Deno.env.get('TELEGRAM_BOT_TOKEN'),
        openai_key_exists: !!Deno.env.get('OPENAI_API_KEY')
      }), {
        headers: { 'Content-Type': 'application/json', ...corsHeaders }
      })
    }
    
    // Setup bot commands on startup
    await setupBotCommands();
    
    return new Response(JSON.stringify({ 
      status: 'Dr247Bot is running!', 
      timestamp: new Date().toISOString() 
    }), {
      headers: { 'Content-Type': 'application/json', ...corsHeaders }
    })
  }
  
  try {
    const url = new URL(req.url)
    
    // Handle Razorpay webhook
    if (url.pathname.includes('/razorpay-webhook')) {
      console.log('ЁЯУи Razorpay webhook received')
      
      const signature = req.headers.get('X-Razorpay-Signature') || ''
      const rawBody = await req.text()
      
      // Verify webhook signature
      let webhookSecret = Deno.env.get('RAZORPAY_WEBHOOK_SECRET') || ''
      
      // Temporary fallback for testing
      if (!webhookSecret && Deno.env.get('RAZORPAY_MODE') === 'test') {
        webhookSecret = 'test_secret_123'  // Only for testing!
        console.log('Using test webhook secret')
      }
      
      console.log('Webhook secret exists:', !!webhookSecret)
      console.log('Webhook secret length:', webhookSecret.length)
      
      if (!webhookSecret) {
        console.error('RAZORPAY_WEBHOOK_SECRET not configured')
        return new Response('Webhook secret not configured', { status: 500, headers: corsHeaders })
      }
      
      // Skip signature verification in test mode for manual testing
      if (Deno.env.get('RAZORPAY_MODE') === 'test' && signature === 'test') {
        console.log('Skipping signature verification for test mode')
      } else {
        // Verify signature using Web Crypto API
        try {
          const encoder = new TextEncoder()
          const key = await crypto.subtle.importKey(
            'raw',
            encoder.encode(webhookSecret),
            { name: 'HMAC', hash: 'SHA-256' },
            false,
            ['sign']
          )
          
          const signatureBuffer = await crypto.subtle.sign(
            'HMAC',
            key,
            encoder.encode(rawBody)
          )
          
          const expectedSignature = Array.from(new Uint8Array(signatureBuffer))
            .map(b => b.toString(16).padStart(2, '0'))
            .join('')
          
          if (signature !== `sha256=${expectedSignature}`) {
            console.error('Invalid webhook signature')
            console.error('Expected:', `sha256=${expectedSignature}`)
            console.error('Received:', signature)
            return new Response('Invalid signature', { status: 401, headers: corsHeaders })
          }
        } catch (error) {
          console.error('Error verifying signature:', error)
          return new Response('Signature verification failed', { status: 401, headers: corsHeaders })
        }
      }
      
      // For now, just log the webhook
      console.log('Razorpay webhook body:', rawBody)
      console.log('Razorpay signature:', signature)
      
      try {
        const webhookData = JSON.parse(rawBody)
        const event = webhookData.event
        
        console.log(`ЁЯОп Razorpay event: ${event}`)
        
        // Handle payment success events
        if (event === 'payment_link.paid' || event === 'payment.captured') {
          const payment = webhookData.payload.payment_link || webhookData.payload.payment.entity
          console.log('ЁЯТ░ Payment successful:', payment)
          
          // Extract phone number from payment
          const phoneNumber = payment.customer_phone || payment.contact
          if (phoneNumber) {
            // Remove country code and formatting
            const cleanPhone = phoneNumber.replace(/^\+91|^91/, '').replace(/\D/g, '')
            console.log(`ЁЯУ▒ Payment from phone: ${cleanPhone}`)
            
            // Find user by phone number (chat_id is the phone number for WhatsApp)
            const { data: user } = await supabase
              .from('users')
              .select('*')
              .eq('chat_id', cleanPhone)
              .single()
            
            if (user && user.state === 'awaiting_complex_payment') {
              console.log(`тЬЕ Processing payment for user ${cleanPhone}`)
              
              // Send confirmation
              await sendTelegramMessage(cleanPhone, 'тЬЕ **PAYMENT RECEIVED!** Analyzing with AI medical panel...')
              
              // Process the pending query
              if (user.pending_query) {
                const diagnosis = await maiDxoOrchestrator(user.pending_query, {
                  age: user.onboarding_info,
                  language: user.language_name,
                  isPaid: true
                })
                
                await sendTelegramMessage(cleanPhone, diagnosis)
              }
              
              // Update user state
              await updateUserState(cleanPhone, { 
                state: 'ready',
                pending_query: null,
                paid_complex_count: (user.paid_complex_count || 0) + 1
              })
            } else if (user && user.state === 'awaiting_subscription') {
              console.log(`тЬЕ Processing subscription for user ${cleanPhone}`)
              
              await sendTelegramMessage(cleanPhone, 'тЬЕ **SUBSCRIPTION ACTIVATED!**\n\nЁЯОЙ **20 MORE QUESTIONS ADDED**')
              await updateUserState(cleanPhone, { 
                state: 'ready',
                plan_type: 'premium',
                pending_query: null,
                usage_count: 0
              })
            }
          }
        }
        
        // Handle payment failure
        if (event === 'payment_link.expired' || event === 'payment.failed') {
          console.log('тЭМ Payment failed/expired')
          
          const payment = webhookData.payload.payment_link || webhookData.payload.payment.entity
          const phoneNumber = payment.customer_phone || payment.contact
          
          if (phoneNumber) {
            const cleanPhone = phoneNumber.replace(/^\+91|^91/, '').replace(/\D/g, '')
            const errorReason = payment.error_description || 'Payment failed or expired'
            
            await sendTelegramMessage(cleanPhone, 
              `тЭМ **PAYMENT FAILED**\n\nReason: ${errorReason}\n\nЁЯФД **Type "retry" to get a new payment link**`
            )
          }
        }
        
      } catch (e) {
        console.error('Error parsing webhook:', e)
      }
      
      return new Response('OK', { status: 200, headers: corsHeaders })
    }
    
    // Handle Telegram webhook
    const update: TelegramUpdate = await req.json()
    console.log('Received update:', JSON.stringify(update))
    
    await handleTelegramUpdate(update)
    
    return new Response('OK', { status: 200, headers: corsHeaders })
    
  } catch (error) {
    console.error('Webhook error:', error)
    return new Response('Error processing update', { status: 500, headers: corsHeaders })
  }
})

// Setup bot commands
async function setupBotCommands() {
  try {
    const commands = [
      { command: 'start', description: 'ЁЯПе Start health consultation' },
      { command: 'health', description: 'ЁЯТм Ask health question' },
      { command: 'janaushadhi', description: 'ЁЯТК Find Jan Aushadhi stores' },
      { command: 'scan', description: 'ЁЯУ╕ Scan medical reports' },
      { command: 'menu', description: 'ЁЯУЛ Show main menu' },
      { command: 'lang', description: 'ЁЯМР Change language' },
      { command: 'help', description: 'тЭУ Get help' }
    ];

    await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setMyCommands`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ commands })
    });
    
    console.log('тЬЕ Bot commands registered');
  } catch (error) {
    console.error('Failed to setup commands:', error);
  }
}